{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ahmad1jalal/Transfer-Learning-with-TensorFlow/blob/main/Transfer%20Learning%20with%20TensorFlow\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P20g-_BGckFQ"
      },
      "source": [
        "## Importing Libraries...."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "P0unpD80cSjQ"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import tensorflow_hub as hub\n",
        "import zipfile\n",
        "import pathlib\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "import datetime\n",
        "from tensorflow.keras.callbacks import TensorBoard\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers.experimental import preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "cmYR0w6OeEoa"
      },
      "outputs": [],
      "source": [
        "# check for GPU\n",
        "# !nvidia-smi"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cAqbO3steJzR",
        "outputId": "63088e5d-21f4-4f78-f739-008843739c0f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2022-08-06 19:12:15--  https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip\n",
            "Resolving storage.googleapis.com (storage.googleapis.com)... 142.250.81.208, 142.250.188.48, 142.251.45.16, ...\n",
            "Connecting to storage.googleapis.com (storage.googleapis.com)|142.250.81.208|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 168546183 (161M) [application/zip]\n",
            "Saving to: ‘10_food_classes_10_percent.zip’\n",
            "\n",
            "10_food_classes_10_ 100%[===================>] 160.74M   101MB/s    in 1.6s    \n",
            "\n",
            "2022-08-06 19:12:16 (101 MB/s) - ‘10_food_classes_10_percent.zip’ saved [168546183/168546183]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# downloading the data\n",
        "!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "PZKSESNPL5Mn"
      },
      "outputs": [],
      "source": [
        "# unzip the data.....\n",
        "zipfile = zipfile.ZipFile(\"10_food_classes_10_percent.zip\",\"r\")\n",
        "zipfile.extractall()\n",
        "zipfile.close()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ulRJ3PeJMY2a",
        "outputId": "59a7141a-0de4-4fe5-a569-9fc2add59217"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 2 directories and 0 images in 10_food_classes_10_percent\n",
            "There are 10 directories and 0 images in 10_food_classes_10_percent/train\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/pizza\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/grilled_salmon\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/hamburger\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/steak\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/chicken_curry\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/ramen\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/sushi\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/fried_rice\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/chicken_wings\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/ice_cream\n",
            "There are 10 directories and 0 images in 10_food_classes_10_percent/test\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/pizza\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/grilled_salmon\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/hamburger\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/steak\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/chicken_curry\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/ramen\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/sushi\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/fried_rice\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/chicken_wings\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/ice_cream\n"
          ]
        }
      ],
      "source": [
        "# walk through the directories....\n",
        "for dirpath,dirnames,filenames in os.walk(\"10_food_classes_10_percent\"):\n",
        "  print(f\"There are {len(dirnames)} directories and {len(filenames)} images in {dirpath}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GN1PfRSPNALe"
      },
      "source": [
        "## Preparing the Data:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AWRFMDXaM3fv",
        "outputId": "2b25b80e-bc6d-43e5-db7a-8ef899b2b441"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training Images :\n",
            "Found 750 images belonging to 10 classes.\n",
            "\n",
            "Testing Images....\n",
            "Found 2500 images belonging to 10 classes.\n"
          ]
        }
      ],
      "source": [
        "# setting up the directories...\n",
        "train_dir = \"10_food_classes_10_percent/train/\"\n",
        "test_dir = \"10_food_classes_10_percent/test/\"\n",
        "\n",
        "# setting up the batch and image shape\n",
        "IMAGE_SHAPE = (224,224)\n",
        "BATCH_SIZE = 32\n",
        "\n",
        "# setting up the train and test data gen\n",
        "train_datagen = ImageDataGenerator(rescale=1/255.)\n",
        "test_datagen = ImageDataGenerator(rescale=1/255.)\n",
        "\n",
        "print(f\"Training Images :\")\n",
        "train_data = train_datagen.flow_from_directory(train_dir,\n",
        "                                               batch_size=BATCH_SIZE,\n",
        "                                               target_size=IMAGE_SHAPE,\n",
        "                                               class_mode=\"categorical\")\n",
        "\n",
        "print(f\"\\nTesting Images....\")\n",
        "test_data = test_datagen.flow_from_directory(test_dir,batch_size=BATCH_SIZE,\n",
        "                                             target_size=IMAGE_SHAPE,\n",
        "                                             class_mode='categorical')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "r2GxKTEtOho-"
      },
      "outputs": [],
      "source": [
        "  # setting up the tensorboard callback\n",
        "  # it log the performance of different models and then view and compare these models in visual way....\n",
        "  def create_tensorboard_callback(dirname,experiment_name):\n",
        "    log_dir = dirname + \"/\"+ experiment_name + \"/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n",
        "    tensorboard_callback = TensorBoard(log_dir = log_dir)\n",
        "    print(f\"Saving TensorBoard Files to : {log_dir}\" )\n",
        "    return tensorboard_callback"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kVXGACXmQsuo"
      },
      "source": [
        "## Creating Model using TensorFlow Hub:\n",
        "\n",
        "Previously, we were making models from scratch by defining each layer by layer. But now we'll import from TensorFlow_Hub.\n",
        "\n",
        "In fact, we're going to use two models which are as follows:\n",
        "\n",
        "**ResNetV2:** a state of art model from 2016\n",
        "\n",
        "**EfficientNet:** a state of art model from 2019\n",
        "\n",
        "State of art means at some point these models has achieved low error rate defined by ImageNet."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "jjY5ZHbNQpPS"
      },
      "outputs": [],
      "source": [
        "# EfficientNet URL\n",
        "efficientnet_url1 = \"https://tfhub.dev/tensorflow/efficientnet/b0/feature-vector/1\"\n",
        "\n",
        "# Resnet Feature vector\n",
        "resnet_url = \"https://tfhub.dev/google/imagenet/resnet_v2_50/feature_vector/4\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "rrQSU7kGDk8M"
      },
      "outputs": [],
      "source": [
        "# we'll create a function that takes url, initialize the model and return the model\n",
        "def create_model(model_url,num_classes=10):\n",
        "\n",
        "  # download the model and save it as keraslayer\n",
        "  feature_extractor_layer = hub.KerasLayer(model_url,trainable=False,\n",
        "                                           name= \"feature_extraction_layer\",\n",
        "                                           input_shape = (224,224,3))\n",
        "  \n",
        "  # create our own model\n",
        "  model = Sequential()\n",
        "  # adding layers...\n",
        "  model.add(feature_extractor_layer)\n",
        "  model.add(Dense(num_classes,activation=\"softmax\",name=\"output_layer\"))\n",
        "\n",
        "  # return the model\n",
        "  return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "84_PNwBhEw6_"
      },
      "outputs": [],
      "source": [
        "# create a model\n",
        "resnet_model = create_model(resnet_url,train_data.num_classes)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ftoKOrrWFAYu",
        "outputId": "2a1609b2-bb08-4153-931b-ea95ede43626"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving TensorBoard Files to : tensorflow_hub/resnet50v2/20220806-191228\n",
            "Epoch 1/5\n",
            "24/24 [==============================] - 33s 789ms/step - loss: 1.9712 - accuracy: 0.3267 - val_loss: 1.2176 - val_accuracy: 0.6152\n",
            "Epoch 2/5\n",
            "24/24 [==============================] - 18s 757ms/step - loss: 0.9134 - accuracy: 0.7307 - val_loss: 0.8622 - val_accuracy: 0.7284\n",
            "Epoch 3/5\n",
            "24/24 [==============================] - 16s 692ms/step - loss: 0.6186 - accuracy: 0.8400 - val_loss: 0.7614 - val_accuracy: 0.7512\n",
            "Epoch 4/5\n",
            "24/24 [==============================] - 17s 740ms/step - loss: 0.4798 - accuracy: 0.8813 - val_loss: 0.7300 - val_accuracy: 0.7548\n",
            "Epoch 5/5\n",
            "24/24 [==============================] - 17s 741ms/step - loss: 0.3788 - accuracy: 0.9160 - val_loss: 0.6723 - val_accuracy: 0.7792\n"
          ]
        }
      ],
      "source": [
        "# compile the model\n",
        "resnet_model.compile(loss='categorical_crossentropy',\n",
        "                     optimizer=tf.keras.optimizers.Adam(),\n",
        "                     metrics=[\"accuracy\"])\n",
        "\n",
        "# fit the model\n",
        "\n",
        "resnet_history = resnet_model.fit(train_data,\n",
        "                                  epochs=5,\n",
        "                                  steps_per_epoch = len(train_data),\n",
        "                                  validation_data = test_data,\n",
        "                                  validation_steps = len(test_data),\n",
        "                              callbacks = [create_tensorboard_callback(\"tensorflow_hub\",'resnet50v2')])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "-AWgUb5jFCEr"
      },
      "outputs": [],
      "source": [
        "# let's make a function that will visualize the performance of the model...\n",
        "\n",
        "def plot_loss_curves(history):\n",
        "\n",
        "  # getting the values of loss and accuracy\n",
        "  loss = history.history['loss']\n",
        "  val_loss = history.history['val_loss']\n",
        "\n",
        "  accuracy = history.history['accuracy']\n",
        "  val_acc = history.history['val_accuracy']\n",
        "\n",
        "  # getting the number of epochs\n",
        "  epochs = range(len(loss))\n",
        "\n",
        "  # plotting the loss\n",
        "  plt.plot(epochs,loss,label=\"Training Loss\")\n",
        "  plt.plot(epochs,val_loss,label=\"Val_Loss\")\n",
        "  plt.legend()\n",
        "  plt.title(\"Loss\")\n",
        "  plt.xlabel(\"Epochs\")\n",
        "\n",
        "  # plotting the accuracy\n",
        "  plt.figure()\n",
        "  plt.plot(epochs,accuracy,label=\"Training Accuracy\")\n",
        "  plt.plot(epochs,val_acc,label=\"Val_Accuracy\")\n",
        "  plt.legend()\n",
        "  plt.title(\"Accuracy\")\n",
        "  plt.xlabel(\"Epochs\");\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "5tlc5cBflfai",
        "outputId": "08c2a218-2a23-4308-84c5-e1d489d6533a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plot_loss_curves(resnet_history)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4JRwzBzGljMy",
        "outputId": "b86cbe70-b748-4397-b250-9ce8a851b677"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " feature_extraction_layer (K  (None, 2048)             23564800  \n",
            " erasLayer)                                                      \n",
            "                                                                 \n",
            " output_layer (Dense)        (None, 10)                20490     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 23,585,290\n",
            "Trainable params: 20,490\n",
            "Non-trainable params: 23,564,800\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "# let's check the model summary\n",
        "resnet_model.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7O9JzQP1ms2D",
        "outputId": "a12eb0f3-59e7-4712-f74e-f79bdeb9b55f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving TensorBoard Files to : tensorflow_hub/efficientnetB0/20220806-191426\n",
            "Epoch 1/5\n",
            "24/24 [==============================] - 28s 782ms/step - loss: 1.8680 - accuracy: 0.4227 - val_loss: 1.3050 - val_accuracy: 0.7212\n",
            "Epoch 2/5\n",
            "24/24 [==============================] - 17s 720ms/step - loss: 1.0609 - accuracy: 0.7680 - val_loss: 0.8654 - val_accuracy: 0.8132\n",
            "Epoch 3/5\n",
            "24/24 [==============================] - 16s 687ms/step - loss: 0.7605 - accuracy: 0.8400 - val_loss: 0.7019 - val_accuracy: 0.8372\n",
            "Epoch 4/5\n",
            "24/24 [==============================] - 16s 707ms/step - loss: 0.6125 - accuracy: 0.8667 - val_loss: 0.6129 - val_accuracy: 0.8564\n",
            "Epoch 5/5\n",
            "24/24 [==============================] - 16s 708ms/step - loss: 0.5155 - accuracy: 0.8893 - val_loss: 0.5583 - val_accuracy: 0.8656\n"
          ]
        }
      ],
      "source": [
        "# we've trained resnet model and it's time to train the efficient model\n",
        "# let's build it...\n",
        "\n",
        "efficient_model = create_model(model_url=efficientnet_url1,num_classes=train_data.num_classes)\n",
        "\n",
        "# compile the model\n",
        "efficient_model.compile(loss=\"categorical_crossentropy\",\n",
        "                        optimizer=tf.keras.optimizers.Adam(),\n",
        "                        metrics=[\"accuracy\"])\n",
        "\n",
        "# fittin the model\n",
        "efficient_history = efficient_model.fit(train_data,epochs=5,\n",
        "                                        steps_per_epoch = len(train_data),\n",
        "                                        validation_data = test_data,\n",
        "                                        validation_steps = len(test_data),\n",
        "                                        callbacks = [create_tensorboard_callback(dirname=\"tensorflow_hub\",experiment_name=\"efficientnetB0\")])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "482TWPT_prDt",
        "outputId": "4d265d97-4f53-470f-a56b-808e563fb47c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# let's plot the model performance\n",
        "plot_loss_curves(efficient_history)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WKRzaxoGrAkw",
        "outputId": "dce46de7-b127-40d3-90be-293261d0cd9d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " feature_extraction_layer (K  (None, 1280)             4049564   \n",
            " erasLayer)                                                      \n",
            "                                                                 \n",
            " output_layer (Dense)        (None, 10)                12810     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 4,062,374\n",
            "Trainable params: 12,810\n",
            "Non-trainable params: 4,049,564\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "# for a look at loss and accuracy curves, if we train our model for a bit more long time then it might improve it's performance\n",
        "# let's check the model summary\n",
        "efficient_model.summary()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NzJOWMdXsFtx"
      },
      "source": [
        "## Comparing Model using TensorBoard\n",
        "\n",
        "Although we've compare the performance of two models by looking at the accuracy and loss of models. But let's compare these two more effieciently by using the TensorFlow TensorBoard feature.\n",
        "\n",
        "TensorBoard keeps the track of model experiments and enable us to share it with the others by shaing the link."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t4mCOOLprn9t",
        "outputId": "02098d6f-f67f-4a9c-dca8-e661e271f3db"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "***** TensorBoard Uploader *****\n",
            "\n",
            "This will upload your TensorBoard logs to https://tensorboard.dev/ from\n",
            "the following directory:\n",
            "\n",
            "./tensorflow_hub/\n",
            "\n",
            "This TensorBoard will be visible to everyone. Do not upload sensitive\n",
            "data.\n",
            "\n",
            "Your use of this service is subject to Google's Terms of Service\n",
            "<https://policies.google.com/terms> and Privacy Policy\n",
            "<https://policies.google.com/privacy>, and TensorBoard.dev's Terms of Service\n",
            "<https://tensorboard.dev/policy/terms/>.\n",
            "\n",
            "This notice will not be shown again while you are logged into the uploader.\n",
            "To log out, run `tensorboard dev auth revoke`.\n",
            "\n",
            "Continue? (yes/NO) yes\n",
            "\n",
            "Please visit this URL to authorize this application: https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=373649185512-8v619h5kft38l4456nm2dj4ubeqsrvh6.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&state=JfmN0NfXrYrOQEiRxdHFgGF5ahD9dI&prompt=consent&access_type=offline\n",
            "Enter the authorization code: 4/1AdQt8qhwv6Flr5yScvUlzdS14jM5QR54vEXXhDTrJktENQgaC1XgkWqEYfM\n",
            "\n",
            "\n",
            "New experiment created. View your TensorBoard at: https://tensorboard.dev/experiment/baugCpc8SxOwe5kyYAiMyQ/\n",
            "\n",
            "\u001b[1m[2022-08-06T19:20:17]\u001b[0m Started scanning logdir.\n",
            "\u001b[1m[2022-08-06T19:20:19]\u001b[0m Total uploaded: 60 scalars, 0 tensors, 2 binary objects (5.6 MB)\n",
            "\u001b[1m[2022-08-06T19:20:19]\u001b[0m Done scanning logdir.\n",
            "\n",
            "\n",
            "Done. View your TensorBoard at https://tensorboard.dev/experiment/baugCpc8SxOwe5kyYAiMyQ/\n"
          ]
        }
      ],
      "source": [
        "# upload experiment to the tensorboard\n",
        "# Upload an experiment:\n",
        "!tensorboard dev upload --logdir ./tensorflow_hub/ \\\n",
        "    --name \"EfficientnetB0 vs Resnet50V2\" \\\n",
        "    --description \"Comparing two model's performance using 10% data\"\\\n",
        "    --one_shot"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "JMNVLa-1urUL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0c498010-2670-4028-f60f-537451655e03"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No such experiment ytYTDHvRS5CWYyJVMwAJew. Either it never existed or it has already been deleted.\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# as all the upload to the tensorbord are public. let's delete the last \n",
        "!tensorboard dev delete --experiment_id ytYTDHvRS5CWYyJVMwAJew"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "XoZ6wUPHx5gY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9582e8da-8636-429f-d9b6-6d54ab063edb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "https://tensorboard.dev/experiment/baugCpc8SxOwe5kyYAiMyQ/\n",
            "\tName                 EfficientnetB0 vs Resnet50V2\n",
            "\tDescription          Comparing two model's performance using 10% data\n",
            "\tId                   baugCpc8SxOwe5kyYAiMyQ\n",
            "\tCreated              2022-08-06 19:20:17 (18 seconds ago)\n",
            "\tUpdated              2022-08-06 19:20:19 (16 seconds ago)\n",
            "\tRuns                 4\n",
            "\tTags                 5\n",
            "\tScalars              60\n",
            "\tTensor bytes         0\n",
            "\tBinary object bytes  5918538\n",
            "https://tensorboard.dev/experiment/x0sk75ONRCO0UPtnmMbrtw/\n",
            "\tName                 EfficientnetB0 vs Resnet50V2\n",
            "\tDescription          Comparing two model's performance using 10% data\n",
            "\tId                   x0sk75ONRCO0UPtnmMbrtw\n",
            "\tCreated              2022-08-05 23:07:58 (20 hours ago)\n",
            "\tUpdated              2022-08-05 23:08:04 (20 hours ago)\n",
            "\tRuns                 4\n",
            "\tTags                 5\n",
            "\tScalars              60\n",
            "\tTensor bytes         0\n",
            "\tBinary object bytes  5918538\n",
            "Total: 2 experiment(s)\n"
          ]
        }
      ],
      "source": [
        "# checking the list of experiments\n",
        "!tensorboard dev list"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9pDric-mzHzn"
      },
      "source": [
        "## Fine Tunning\n",
        "\n",
        "In fine tunning transfer learning the pre-trained model weights from another model are unfrozen and tweaked during training.\n",
        "\n",
        "In feature extraction section we just trained the top 3 layers while in fine tunning, we might train more than 3 layers to get better results. Let's dive in!\n",
        "\n",
        "We're going to cover the following things:\n",
        "\n",
        "\n",
        "*   Model 0 : Transfer learning using keras Functional API\n",
        "\n",
        "*   Model 1 : feature extraction using 1% of data with augmentation\n",
        "\n",
        "*   Model 2 : feature extraction using 10% of data with augmentation\n",
        "\n",
        "*   Model 3 : fine tuned transfer learning on 10% data\n",
        "\n",
        "*   Model 4 : fine tuned transfer learning on 100% data\n",
        "\n",
        "\n",
        "*   List item\n",
        "\n",
        "\n",
        "*   List item\n",
        "\n",
        "\n",
        "*   List item\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "kHnre0rh5zRi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4e66de9b-5c35-4dc4-a0c5-a816b36a51db"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 2 directories and 0 images in 10_food_classes_10_percent\n",
            "There are 10 directories and 0 images in 10_food_classes_10_percent/train\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/pizza\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/grilled_salmon\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/hamburger\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/steak\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/chicken_curry\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/ramen\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/sushi\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/fried_rice\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/chicken_wings\n",
            "There are 0 directories and 75 images in 10_food_classes_10_percent/train/ice_cream\n",
            "There are 10 directories and 0 images in 10_food_classes_10_percent/test\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/pizza\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/grilled_salmon\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/hamburger\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/steak\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/chicken_curry\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/ramen\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/sushi\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/fried_rice\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/chicken_wings\n",
            "There are 0 directories and 250 images in 10_food_classes_10_percent/test/ice_cream\n"
          ]
        }
      ],
      "source": [
        "for dirpath,dirnames,filenames in os.walk(\"10_food_classes_10_percent\"):\n",
        "  print(f\"There are {len(dirnames)} directories and {len(filenames)} images in {dirpath}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "-okxAeuUyYVF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ed6c0809-c1e1-4293-db37-0090f25773a5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 2 directories and 0 images in /content/10_food_classes_10_percent\n",
            "There are 10 directories and 0 images in /content/10_food_classes_10_percent/train\n",
            "There are 0 directories and 75 images in /content/10_food_classes_10_percent/train/pizza\n",
            "There are 0 directories and 75 images in /content/10_food_classes_10_percent/train/grilled_salmon\n",
            "There are 0 directories and 75 images in /content/10_food_classes_10_percent/train/hamburger\n",
            "There are 0 directories and 75 images in /content/10_food_classes_10_percent/train/steak\n",
            "There are 0 directories and 75 images in /content/10_food_classes_10_percent/train/chicken_curry\n",
            "There are 0 directories and 75 images in /content/10_food_classes_10_percent/train/ramen\n",
            "There are 0 directories and 75 images in /content/10_food_classes_10_percent/train/sushi\n",
            "There are 0 directories and 75 images in /content/10_food_classes_10_percent/train/fried_rice\n",
            "There are 0 directories and 75 images in /content/10_food_classes_10_percent/train/chicken_wings\n",
            "There are 0 directories and 75 images in /content/10_food_classes_10_percent/train/ice_cream\n",
            "There are 10 directories and 0 images in /content/10_food_classes_10_percent/test\n",
            "There are 0 directories and 250 images in /content/10_food_classes_10_percent/test/pizza\n",
            "There are 0 directories and 250 images in /content/10_food_classes_10_percent/test/grilled_salmon\n",
            "There are 0 directories and 250 images in /content/10_food_classes_10_percent/test/hamburger\n",
            "There are 0 directories and 250 images in /content/10_food_classes_10_percent/test/steak\n",
            "There are 0 directories and 250 images in /content/10_food_classes_10_percent/test/chicken_curry\n",
            "There are 0 directories and 250 images in /content/10_food_classes_10_percent/test/ramen\n",
            "There are 0 directories and 250 images in /content/10_food_classes_10_percent/test/sushi\n",
            "There are 0 directories and 250 images in /content/10_food_classes_10_percent/test/fried_rice\n",
            "There are 0 directories and 250 images in /content/10_food_classes_10_percent/test/chicken_wings\n",
            "There are 0 directories and 250 images in /content/10_food_classes_10_percent/test/ice_cream\n"
          ]
        }
      ],
      "source": [
        "# let's again walk through the directory\n",
        "for dirpath,dirnames,filenames in os.walk(\"/content/10_food_classes_10_percent\"):\n",
        "  print(f\"There are {len(dirnames)} directories and {len(filenames)} images in {dirpath}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HehwvjAJCIjw"
      },
      "source": [
        "## Model 0 :  Build a model using transfer learning Functional API\n",
        "\n",
        "We're going to build our model by using tf.keras.applications module as it contains series of pre-trained models."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "r6RJMcTX6gjb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a483b232-2cf1-4a4a-bff5-ebe4828cb4c5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/keras-applications/efficientnetb0_notop.h5\n",
            "16711680/16705208 [==============================] - 0s 0us/step\n",
            "16719872/16705208 [==============================] - 0s 0us/step\n",
            "Saving TensorBoard Files to : transfer_learning/10_percent_data/20220806-192039\n",
            "Epoch 1/5\n",
            "24/24 [==============================] - 17s 456ms/step - loss: 2.3196 - accuracy: 0.0907 - val_loss: 2.3039 - val_accuracy: 0.1053\n",
            "Epoch 2/5\n",
            "24/24 [==============================] - 7s 308ms/step - loss: 2.3181 - accuracy: 0.0973 - val_loss: 2.3032 - val_accuracy: 0.1069\n",
            "Epoch 3/5\n",
            "24/24 [==============================] - 9s 371ms/step - loss: 2.3131 - accuracy: 0.1013 - val_loss: 2.3082 - val_accuracy: 0.0839\n",
            "Epoch 4/5\n",
            "24/24 [==============================] - 7s 277ms/step - loss: 2.3200 - accuracy: 0.0987 - val_loss: 2.3066 - val_accuracy: 0.1003\n",
            "Epoch 5/5\n",
            "24/24 [==============================] - 9s 373ms/step - loss: 2.3133 - accuracy: 0.0987 - val_loss: 2.3106 - val_accuracy: 0.0872\n"
          ]
        }
      ],
      "source": [
        "# let's build the model using functional keras API\n",
        "\n",
        "# create base model\n",
        "base_model = tf.keras.applications.EfficientNetB0(include_top=False) # set the include_top = False because we're going to create our own output layers\n",
        "\n",
        "# freeze the pre-trained patterns...\n",
        "base_model.trainable = False\n",
        "\n",
        "# create inputs to the base model\n",
        "inputs = tf.keras.layers.Input(shape=(224,224,3),name=\"input_layer\")\n",
        "\n",
        "# pass the inputs to the model\n",
        "X = base_model(inputs)\n",
        "\n",
        "# pool the output layers basically aggregate all the important imformation\n",
        "X = tf.keras.layers.GlobalAveragePooling2D(name=\"global_average_pooling\")(X)\n",
        "\n",
        "# create the output layer\n",
        "outputs = tf.keras.layers.Dense(10,activation='softmax',name='output_layer')(X)\n",
        "\n",
        "# combine the inputs and outputs\n",
        "model_0 = tf.keras.Model(inputs,outputs)\n",
        "\n",
        "# compile the model\n",
        "model_0.compile(loss=\"categorical_crossentropy\",\n",
        "                optimizer=tf.keras.optimizers.Adam(),\n",
        "                metrics=['accuracy'])\n",
        "\n",
        "# fitting the model\n",
        "history_0 = model_0.fit(train_data,epochs=5,\n",
        "                        steps_per_epoch=len(train_data),\n",
        "                        validation_data = test_data,\n",
        "                        validation_steps = int(0.25 * len(test_data)),\n",
        "                        callbacks = [create_tensorboard_callback('transfer_learning','10_percent_data')])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n4O5IKP9IG5X"
      },
      "source": [
        "so far our model has achieved 98% accuracy on training and 87% accuracy on test data. This is the power of transfer learning."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "SZsMHfbuHL6d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "568f82e6-e233-4de9-e622-ecf2aa8a119f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 <keras.engine.input_layer.InputLayer object at 0x7f214c841e90>\n",
            "1 <keras.layers.preprocessing.image_preprocessing.Rescaling object at 0x7f214c83c550>\n",
            "2 <keras.layers.preprocessing.normalization.Normalization object at 0x7f214c81cf50>\n",
            "3 <keras.layers.convolutional.ZeroPadding2D object at 0x7f214a7fdf50>\n",
            "4 <keras.layers.convolutional.Conv2D object at 0x7f214c83ce10>\n",
            "5 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2477b3de10>\n",
            "6 <keras.layers.core.activation.Activation object at 0x7f2477b3de50>\n",
            "7 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c83e0d0>\n",
            "8 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2477b3fb10>\n",
            "9 <keras.layers.core.activation.Activation object at 0x7f214c795f10>\n",
            "10 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c79a510>\n",
            "11 <keras.layers.core.reshape.Reshape object at 0x7f214c7a2510>\n",
            "12 <keras.layers.convolutional.Conv2D object at 0x7f214c7ab490>\n",
            "13 <keras.layers.convolutional.Conv2D object at 0x7f214c8a6190>\n",
            "14 <keras.layers.merge.Multiply object at 0x7f214c7bd8d0>\n",
            "15 <keras.layers.convolutional.Conv2D object at 0x7f214c7c0310>\n",
            "16 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c749b90>\n",
            "17 <keras.layers.convolutional.Conv2D object at 0x7f214c744310>\n",
            "18 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c752750>\n",
            "19 <keras.layers.core.activation.Activation object at 0x7f214c75da10>\n",
            "20 <keras.layers.convolutional.ZeroPadding2D object at 0x7f214c760390>\n",
            "21 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c757c50>\n",
            "22 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c760550>\n",
            "23 <keras.layers.core.activation.Activation object at 0x7f214c76f0d0>\n",
            "24 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c852b50>\n",
            "25 <keras.layers.core.reshape.Reshape object at 0x7f214c76f850>\n",
            "26 <keras.layers.convolutional.Conv2D object at 0x7f214c75df10>\n",
            "27 <keras.layers.convolutional.Conv2D object at 0x7f214c7496d0>\n",
            "28 <keras.layers.merge.Multiply object at 0x7f214c795e50>\n",
            "29 <keras.layers.convolutional.Conv2D object at 0x7f214c744610>\n",
            "30 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c7950d0>\n",
            "31 <keras.layers.convolutional.Conv2D object at 0x7f214c7082d0>\n",
            "32 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c81ce90>\n",
            "33 <keras.layers.core.activation.Activation object at 0x7f214c7081d0>\n",
            "34 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c71ac10>\n",
            "35 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c71a9d0>\n",
            "36 <keras.layers.core.activation.Activation object at 0x7f214c71abd0>\n",
            "37 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c724410>\n",
            "38 <keras.layers.core.reshape.Reshape object at 0x7f214c729390>\n",
            "39 <keras.layers.convolutional.Conv2D object at 0x7f214c72d650>\n",
            "40 <keras.layers.convolutional.Conv2D object at 0x7f214c781e90>\n",
            "41 <keras.layers.merge.Multiply object at 0x7f214c73ff10>\n",
            "42 <keras.layers.convolutional.Conv2D object at 0x7f214c6c5e50>\n",
            "43 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c73fb10>\n",
            "44 <keras.layers.core.dropout.Dropout object at 0x7f214c6da5d0>\n",
            "45 <keras.layers.merge.Add object at 0x7f2478dfd790>\n",
            "46 <keras.layers.convolutional.Conv2D object at 0x7f214c6cf6d0>\n",
            "47 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c73f310>\n",
            "48 <keras.layers.core.activation.Activation object at 0x7f214c6f1ad0>\n",
            "49 <keras.layers.convolutional.ZeroPadding2D object at 0x7f214c6f13d0>\n",
            "50 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c6faf90>\n",
            "51 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c6f6a10>\n",
            "52 <keras.layers.core.activation.Activation object at 0x7f214c6e9490>\n",
            "53 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c701110>\n",
            "54 <keras.layers.core.reshape.Reshape object at 0x7f214c6f1c50>\n",
            "55 <keras.layers.convolutional.Conv2D object at 0x7f214c685e10>\n",
            "56 <keras.layers.convolutional.Conv2D object at 0x7f214c6cff10>\n",
            "57 <keras.layers.merge.Multiply object at 0x7f214c6fd1d0>\n",
            "58 <keras.layers.convolutional.Conv2D object at 0x7f214c6a1310>\n",
            "59 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c68c5d0>\n",
            "60 <keras.layers.convolutional.Conv2D object at 0x7f214c6b1e10>\n",
            "61 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c6aec50>\n",
            "62 <keras.layers.core.activation.Activation object at 0x7f214c6b8f50>\n",
            "63 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c657250>\n",
            "64 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c657950>\n",
            "65 <keras.layers.core.activation.Activation object at 0x7f214c65c110>\n",
            "66 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c6b1a10>\n",
            "67 <keras.layers.core.reshape.Reshape object at 0x7f214c6fa050>\n",
            "68 <keras.layers.convolutional.Conv2D object at 0x7f214c6b1090>\n",
            "69 <keras.layers.convolutional.Conv2D object at 0x7f214c6c33d0>\n",
            "70 <keras.layers.merge.Multiply object at 0x7f214c72d850>\n",
            "71 <keras.layers.convolutional.Conv2D object at 0x7f214c692490>\n",
            "72 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c6b1190>\n",
            "73 <keras.layers.core.dropout.Dropout object at 0x7f214c665150>\n",
            "74 <keras.layers.merge.Add object at 0x7f214c6d2710>\n",
            "75 <keras.layers.convolutional.Conv2D object at 0x7f214c6675d0>\n",
            "76 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c710910>\n",
            "77 <keras.layers.core.activation.Activation object at 0x7f214c676410>\n",
            "78 <keras.layers.convolutional.ZeroPadding2D object at 0x7f214c669490>\n",
            "79 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c671490>\n",
            "80 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c66db50>\n",
            "81 <keras.layers.core.activation.Activation object at 0x7f214c65c050>\n",
            "82 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c60ac10>\n",
            "83 <keras.layers.core.reshape.Reshape object at 0x7f214c60ae90>\n",
            "84 <keras.layers.convolutional.Conv2D object at 0x7f214c649c50>\n",
            "85 <keras.layers.convolutional.Conv2D object at 0x7f214c692050>\n",
            "86 <keras.layers.merge.Multiply object at 0x7f214c620f50>\n",
            "87 <keras.layers.convolutional.Conv2D object at 0x7f214c632e90>\n",
            "88 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c6208d0>\n",
            "89 <keras.layers.convolutional.Conv2D object at 0x7f214c6351d0>\n",
            "90 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c63aed0>\n",
            "91 <keras.layers.core.activation.Activation object at 0x7f214c5ce3d0>\n",
            "92 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c635d50>\n",
            "93 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c5e2f50>\n",
            "94 <keras.layers.core.activation.Activation object at 0x7f214c5c5990>\n",
            "95 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c5e2d10>\n",
            "96 <keras.layers.core.reshape.Reshape object at 0x7f214c5c5490>\n",
            "97 <keras.layers.convolutional.Conv2D object at 0x7f214c60ae50>\n",
            "98 <keras.layers.convolutional.Conv2D object at 0x7f214c5c5850>\n",
            "99 <keras.layers.merge.Multiply object at 0x7f214c5ff890>\n",
            "100 <keras.layers.convolutional.Conv2D object at 0x7f214c61ad10>\n",
            "101 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c5ffcd0>\n",
            "102 <keras.layers.core.dropout.Dropout object at 0x7f214c592b10>\n",
            "103 <keras.layers.merge.Add object at 0x7f214c6673d0>\n",
            "104 <keras.layers.convolutional.Conv2D object at 0x7f214c5a8e90>\n",
            "105 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c5a8810>\n",
            "106 <keras.layers.core.activation.Activation object at 0x7f214c59d590>\n",
            "107 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c5ed090>\n",
            "108 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c5ceb50>\n",
            "109 <keras.layers.core.activation.Activation object at 0x7f214c638710>\n",
            "110 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c60a650>\n",
            "111 <keras.layers.core.reshape.Reshape object at 0x7f214c5da510>\n",
            "112 <keras.layers.convolutional.Conv2D object at 0x7f214c71a1d0>\n",
            "113 <keras.layers.convolutional.Conv2D object at 0x7f214c5a29d0>\n",
            "114 <keras.layers.merge.Multiply object at 0x7f214c665ed0>\n",
            "115 <keras.layers.convolutional.Conv2D object at 0x7f214c692390>\n",
            "116 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c6207d0>\n",
            "117 <keras.layers.core.dropout.Dropout object at 0x7f214c5be950>\n",
            "118 <keras.layers.merge.Add object at 0x7f214c59d850>\n",
            "119 <keras.layers.convolutional.Conv2D object at 0x7f214c669d10>\n",
            "120 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c5f0450>\n",
            "121 <keras.layers.core.activation.Activation object at 0x7f214c5bdb90>\n",
            "122 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c552290>\n",
            "123 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c6203d0>\n",
            "124 <keras.layers.core.activation.Activation object at 0x7f214c54bf50>\n",
            "125 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c55c410>\n",
            "126 <keras.layers.core.reshape.Reshape object at 0x7f214c55e2d0>\n",
            "127 <keras.layers.convolutional.Conv2D object at 0x7f214c55e8d0>\n",
            "128 <keras.layers.convolutional.Conv2D object at 0x7f214c5b9cd0>\n",
            "129 <keras.layers.merge.Multiply object at 0x7f214c577f50>\n",
            "130 <keras.layers.convolutional.Conv2D object at 0x7f214c57ee90>\n",
            "131 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c577b50>\n",
            "132 <keras.layers.convolutional.Conv2D object at 0x7f214c512510>\n",
            "133 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c504550>\n",
            "134 <keras.layers.core.activation.Activation object at 0x7f214c512cd0>\n",
            "135 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c526d50>\n",
            "136 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c526c50>\n",
            "137 <keras.layers.core.activation.Activation object at 0x7f214c526a10>\n",
            "138 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c532550>\n",
            "139 <keras.layers.core.reshape.Reshape object at 0x7f214c5356d0>\n",
            "140 <keras.layers.convolutional.Conv2D object at 0x7f214c535650>\n",
            "141 <keras.layers.convolutional.Conv2D object at 0x7f214c508b10>\n",
            "142 <keras.layers.merge.Multiply object at 0x7f214c4cdfd0>\n",
            "143 <keras.layers.convolutional.Conv2D object at 0x7f214c4d6c90>\n",
            "144 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c4cdcd0>\n",
            "145 <keras.layers.core.dropout.Dropout object at 0x7f214c4e93d0>\n",
            "146 <keras.layers.merge.Add object at 0x7f214c4e1350>\n",
            "147 <keras.layers.convolutional.Conv2D object at 0x7f214c535dd0>\n",
            "148 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c50c390>\n",
            "149 <keras.layers.core.activation.Activation object at 0x7f214c5129d0>\n",
            "150 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c50ca10>\n",
            "151 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c53f850>\n",
            "152 <keras.layers.core.activation.Activation object at 0x7f214c53f450>\n",
            "153 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c5086d0>\n",
            "154 <keras.layers.core.reshape.Reshape object at 0x7f214c4e1a10>\n",
            "155 <keras.layers.convolutional.Conv2D object at 0x7f214c53b490>\n",
            "156 <keras.layers.convolutional.Conv2D object at 0x7f214c53f950>\n",
            "157 <keras.layers.merge.Multiply object at 0x7f214c4ee7d0>\n",
            "158 <keras.layers.convolutional.Conv2D object at 0x7f214c484710>\n",
            "159 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c4f8990>\n",
            "160 <keras.layers.core.dropout.Dropout object at 0x7f214c491090>\n",
            "161 <keras.layers.merge.Add object at 0x7f214c4a6f90>\n",
            "162 <keras.layers.convolutional.Conv2D object at 0x7f214c4a6c50>\n",
            "163 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c4989d0>\n",
            "164 <keras.layers.core.activation.Activation object at 0x7f214c491bd0>\n",
            "165 <keras.layers.convolutional.ZeroPadding2D object at 0x7f214c49db90>\n",
            "166 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c4c2bd0>\n",
            "167 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c4abd90>\n",
            "168 <keras.layers.core.activation.Activation object at 0x7f214c498f90>\n",
            "169 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c4581d0>\n",
            "170 <keras.layers.core.reshape.Reshape object at 0x7f214c4bee10>\n",
            "171 <keras.layers.convolutional.Conv2D object at 0x7f214c4bec50>\n",
            "172 <keras.layers.convolutional.Conv2D object at 0x7f214c4a60d0>\n",
            "173 <keras.layers.merge.Multiply object at 0x7f214c4665d0>\n",
            "174 <keras.layers.convolutional.Conv2D object at 0x7f214c4660d0>\n",
            "175 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c466c10>\n",
            "176 <keras.layers.convolutional.Conv2D object at 0x7f214c478e90>\n",
            "177 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c473750>\n",
            "178 <keras.layers.core.activation.Activation object at 0x7f214c410590>\n",
            "179 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c410c10>\n",
            "180 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c425590>\n",
            "181 <keras.layers.core.activation.Activation object at 0x7f214c405f90>\n",
            "182 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c41e0d0>\n",
            "183 <keras.layers.core.reshape.Reshape object at 0x7f214c4050d0>\n",
            "184 <keras.layers.convolutional.Conv2D object at 0x7f214c435250>\n",
            "185 <keras.layers.convolutional.Conv2D object at 0x7f214c405e50>\n",
            "186 <keras.layers.merge.Multiply object at 0x7f214c47fbd0>\n",
            "187 <keras.layers.convolutional.Conv2D object at 0x7f215159f2d0>\n",
            "188 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2151278dd0>\n",
            "189 <keras.layers.core.dropout.Dropout object at 0x7f2150faea50>\n",
            "190 <keras.layers.merge.Add object at 0x7f2150e49e50>\n",
            "191 <keras.layers.convolutional.Conv2D object at 0x7f2150a41e90>\n",
            "192 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f21507ec850>\n",
            "193 <keras.layers.core.activation.Activation object at 0x7f21506641d0>\n",
            "194 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f215039c5d0>\n",
            "195 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214a7ca290>\n",
            "196 <keras.layers.core.activation.Activation object at 0x7f214a7c9190>\n",
            "197 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214a7c9bd0>\n",
            "198 <keras.layers.core.reshape.Reshape object at 0x7f2477b3d210>\n",
            "199 <keras.layers.convolutional.Conv2D object at 0x7f214c454c50>\n",
            "200 <keras.layers.convolutional.Conv2D object at 0x7f214c458f50>\n",
            "201 <keras.layers.merge.Multiply object at 0x7f214c752ed0>\n",
            "202 <keras.layers.convolutional.Conv2D object at 0x7f23d94c9a90>\n",
            "203 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c82e810>\n",
            "204 <keras.layers.core.dropout.Dropout object at 0x7f214c8d45d0>\n",
            "205 <keras.layers.merge.Add object at 0x7f214a7f3890>\n",
            "206 <keras.layers.convolutional.Conv2D object at 0x7f214a7f3d90>\n",
            "207 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c8d4190>\n",
            "208 <keras.layers.core.activation.Activation object at 0x7f214c815650>\n",
            "209 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214c8f5690>\n",
            "210 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f214c87f210>\n",
            "211 <keras.layers.core.activation.Activation object at 0x7f214c86b850>\n",
            "212 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c86b910>\n",
            "213 <keras.layers.core.reshape.Reshape object at 0x7f214c8bbe90>\n",
            "214 <keras.layers.convolutional.Conv2D object at 0x7f214c8ac990>\n",
            "215 <keras.layers.convolutional.Conv2D object at 0x7f214c80c250>\n",
            "216 <keras.layers.merge.Multiply object at 0x7f214a7e3310>\n",
            "217 <keras.layers.convolutional.Conv2D object at 0x7f214c91a150>\n",
            "218 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f21516232d0>\n",
            "219 <keras.layers.core.dropout.Dropout object at 0x7f214a7d1d10>\n",
            "220 <keras.layers.merge.Add object at 0x7f214c91a5d0>\n",
            "221 <keras.layers.convolutional.Conv2D object at 0x7f214a7d5110>\n",
            "222 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f23d94b4510>\n",
            "223 <keras.layers.core.activation.Activation object at 0x7f215164b290>\n",
            "224 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214a7d5350>\n",
            "225 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2151634110>\n",
            "226 <keras.layers.core.activation.Activation object at 0x7f214a7d5f10>\n",
            "227 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214c822cd0>\n",
            "228 <keras.layers.core.reshape.Reshape object at 0x7f214c8f5590>\n",
            "229 <keras.layers.convolutional.Conv2D object at 0x7f214c8753d0>\n",
            "230 <keras.layers.convolutional.Conv2D object at 0x7f214c4327d0>\n",
            "231 <keras.layers.merge.Multiply object at 0x7f2150538250>\n",
            "232 <keras.layers.convolutional.Conv2D object at 0x7f2150a9f050>\n",
            "233 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f21516a5510>\n",
            "234 <keras.layers.convolutional.Conv2D object at 0x7f23d9483810>\n",
            "235 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2150e1a390>\n",
            "236 <keras.layers.core.activation.Activation object at 0x7f2151682cd0>\n"
          ]
        }
      ],
      "source": [
        "# let's check out the layers...\n",
        "for layer_number,layer in enumerate(base_model.layers):\n",
        "  print(layer_number , layer)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "PhqNma97IkdD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9032a31c-ae13-4b35-fcd4-887c1fe8ac1a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"efficientnetb0\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                   Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            " input_1 (InputLayer)           [(None, None, None,  0           []                               \n",
            "                                 3)]                                                              \n",
            "                                                                                                  \n",
            " rescaling (Rescaling)          (None, None, None,   0           ['input_1[0][0]']                \n",
            "                                3)                                                                \n",
            "                                                                                                  \n",
            " normalization (Normalization)  (None, None, None,   7           ['rescaling[0][0]']              \n",
            "                                3)                                                                \n",
            "                                                                                                  \n",
            " stem_conv_pad (ZeroPadding2D)  (None, None, None,   0           ['normalization[0][0]']          \n",
            "                                3)                                                                \n",
            "                                                                                                  \n",
            " stem_conv (Conv2D)             (None, None, None,   864         ['stem_conv_pad[0][0]']          \n",
            "                                32)                                                               \n",
            "                                                                                                  \n",
            " stem_bn (BatchNormalization)   (None, None, None,   128         ['stem_conv[0][0]']              \n",
            "                                32)                                                               \n",
            "                                                                                                  \n",
            " stem_activation (Activation)   (None, None, None,   0           ['stem_bn[0][0]']                \n",
            "                                32)                                                               \n",
            "                                                                                                  \n",
            " block1a_dwconv (DepthwiseConv2  (None, None, None,   288        ['stem_activation[0][0]']        \n",
            " D)                             32)                                                               \n",
            "                                                                                                  \n",
            " block1a_bn (BatchNormalization  (None, None, None,   128        ['block1a_dwconv[0][0]']         \n",
            " )                              32)                                                               \n",
            "                                                                                                  \n",
            " block1a_activation (Activation  (None, None, None,   0          ['block1a_bn[0][0]']             \n",
            " )                              32)                                                               \n",
            "                                                                                                  \n",
            " block1a_se_squeeze (GlobalAver  (None, 32)          0           ['block1a_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block1a_se_reshape (Reshape)   (None, 1, 1, 32)     0           ['block1a_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block1a_se_reduce (Conv2D)     (None, 1, 1, 8)      264         ['block1a_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block1a_se_expand (Conv2D)     (None, 1, 1, 32)     288         ['block1a_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block1a_se_excite (Multiply)   (None, None, None,   0           ['block1a_activation[0][0]',     \n",
            "                                32)                               'block1a_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block1a_project_conv (Conv2D)  (None, None, None,   512         ['block1a_se_excite[0][0]']      \n",
            "                                16)                                                               \n",
            "                                                                                                  \n",
            " block1a_project_bn (BatchNorma  (None, None, None,   64         ['block1a_project_conv[0][0]']   \n",
            " lization)                      16)                                                               \n",
            "                                                                                                  \n",
            " block2a_expand_conv (Conv2D)   (None, None, None,   1536        ['block1a_project_bn[0][0]']     \n",
            "                                96)                                                               \n",
            "                                                                                                  \n",
            " block2a_expand_bn (BatchNormal  (None, None, None,   384        ['block2a_expand_conv[0][0]']    \n",
            " ization)                       96)                                                               \n",
            "                                                                                                  \n",
            " block2a_expand_activation (Act  (None, None, None,   0          ['block2a_expand_bn[0][0]']      \n",
            " ivation)                       96)                                                               \n",
            "                                                                                                  \n",
            " block2a_dwconv_pad (ZeroPaddin  (None, None, None,   0          ['block2a_expand_activation[0][0]\n",
            " g2D)                           96)                              ']                               \n",
            "                                                                                                  \n",
            " block2a_dwconv (DepthwiseConv2  (None, None, None,   864        ['block2a_dwconv_pad[0][0]']     \n",
            " D)                             96)                                                               \n",
            "                                                                                                  \n",
            " block2a_bn (BatchNormalization  (None, None, None,   384        ['block2a_dwconv[0][0]']         \n",
            " )                              96)                                                               \n",
            "                                                                                                  \n",
            " block2a_activation (Activation  (None, None, None,   0          ['block2a_bn[0][0]']             \n",
            " )                              96)                                                               \n",
            "                                                                                                  \n",
            " block2a_se_squeeze (GlobalAver  (None, 96)          0           ['block2a_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block2a_se_reshape (Reshape)   (None, 1, 1, 96)     0           ['block2a_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block2a_se_reduce (Conv2D)     (None, 1, 1, 4)      388         ['block2a_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block2a_se_expand (Conv2D)     (None, 1, 1, 96)     480         ['block2a_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block2a_se_excite (Multiply)   (None, None, None,   0           ['block2a_activation[0][0]',     \n",
            "                                96)                               'block2a_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block2a_project_conv (Conv2D)  (None, None, None,   2304        ['block2a_se_excite[0][0]']      \n",
            "                                24)                                                               \n",
            "                                                                                                  \n",
            " block2a_project_bn (BatchNorma  (None, None, None,   96         ['block2a_project_conv[0][0]']   \n",
            " lization)                      24)                                                               \n",
            "                                                                                                  \n",
            " block2b_expand_conv (Conv2D)   (None, None, None,   3456        ['block2a_project_bn[0][0]']     \n",
            "                                144)                                                              \n",
            "                                                                                                  \n",
            " block2b_expand_bn (BatchNormal  (None, None, None,   576        ['block2b_expand_conv[0][0]']    \n",
            " ization)                       144)                                                              \n",
            "                                                                                                  \n",
            " block2b_expand_activation (Act  (None, None, None,   0          ['block2b_expand_bn[0][0]']      \n",
            " ivation)                       144)                                                              \n",
            "                                                                                                  \n",
            " block2b_dwconv (DepthwiseConv2  (None, None, None,   1296       ['block2b_expand_activation[0][0]\n",
            " D)                             144)                             ']                               \n",
            "                                                                                                  \n",
            " block2b_bn (BatchNormalization  (None, None, None,   576        ['block2b_dwconv[0][0]']         \n",
            " )                              144)                                                              \n",
            "                                                                                                  \n",
            " block2b_activation (Activation  (None, None, None,   0          ['block2b_bn[0][0]']             \n",
            " )                              144)                                                              \n",
            "                                                                                                  \n",
            " block2b_se_squeeze (GlobalAver  (None, 144)         0           ['block2b_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block2b_se_reshape (Reshape)   (None, 1, 1, 144)    0           ['block2b_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block2b_se_reduce (Conv2D)     (None, 1, 1, 6)      870         ['block2b_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block2b_se_expand (Conv2D)     (None, 1, 1, 144)    1008        ['block2b_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block2b_se_excite (Multiply)   (None, None, None,   0           ['block2b_activation[0][0]',     \n",
            "                                144)                              'block2b_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block2b_project_conv (Conv2D)  (None, None, None,   3456        ['block2b_se_excite[0][0]']      \n",
            "                                24)                                                               \n",
            "                                                                                                  \n",
            " block2b_project_bn (BatchNorma  (None, None, None,   96         ['block2b_project_conv[0][0]']   \n",
            " lization)                      24)                                                               \n",
            "                                                                                                  \n",
            " block2b_drop (Dropout)         (None, None, None,   0           ['block2b_project_bn[0][0]']     \n",
            "                                24)                                                               \n",
            "                                                                                                  \n",
            " block2b_add (Add)              (None, None, None,   0           ['block2b_drop[0][0]',           \n",
            "                                24)                               'block2a_project_bn[0][0]']     \n",
            "                                                                                                  \n",
            " block3a_expand_conv (Conv2D)   (None, None, None,   3456        ['block2b_add[0][0]']            \n",
            "                                144)                                                              \n",
            "                                                                                                  \n",
            " block3a_expand_bn (BatchNormal  (None, None, None,   576        ['block3a_expand_conv[0][0]']    \n",
            " ization)                       144)                                                              \n",
            "                                                                                                  \n",
            " block3a_expand_activation (Act  (None, None, None,   0          ['block3a_expand_bn[0][0]']      \n",
            " ivation)                       144)                                                              \n",
            "                                                                                                  \n",
            " block3a_dwconv_pad (ZeroPaddin  (None, None, None,   0          ['block3a_expand_activation[0][0]\n",
            " g2D)                           144)                             ']                               \n",
            "                                                                                                  \n",
            " block3a_dwconv (DepthwiseConv2  (None, None, None,   3600       ['block3a_dwconv_pad[0][0]']     \n",
            " D)                             144)                                                              \n",
            "                                                                                                  \n",
            " block3a_bn (BatchNormalization  (None, None, None,   576        ['block3a_dwconv[0][0]']         \n",
            " )                              144)                                                              \n",
            "                                                                                                  \n",
            " block3a_activation (Activation  (None, None, None,   0          ['block3a_bn[0][0]']             \n",
            " )                              144)                                                              \n",
            "                                                                                                  \n",
            " block3a_se_squeeze (GlobalAver  (None, 144)         0           ['block3a_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block3a_se_reshape (Reshape)   (None, 1, 1, 144)    0           ['block3a_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block3a_se_reduce (Conv2D)     (None, 1, 1, 6)      870         ['block3a_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block3a_se_expand (Conv2D)     (None, 1, 1, 144)    1008        ['block3a_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block3a_se_excite (Multiply)   (None, None, None,   0           ['block3a_activation[0][0]',     \n",
            "                                144)                              'block3a_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block3a_project_conv (Conv2D)  (None, None, None,   5760        ['block3a_se_excite[0][0]']      \n",
            "                                40)                                                               \n",
            "                                                                                                  \n",
            " block3a_project_bn (BatchNorma  (None, None, None,   160        ['block3a_project_conv[0][0]']   \n",
            " lization)                      40)                                                               \n",
            "                                                                                                  \n",
            " block3b_expand_conv (Conv2D)   (None, None, None,   9600        ['block3a_project_bn[0][0]']     \n",
            "                                240)                                                              \n",
            "                                                                                                  \n",
            " block3b_expand_bn (BatchNormal  (None, None, None,   960        ['block3b_expand_conv[0][0]']    \n",
            " ization)                       240)                                                              \n",
            "                                                                                                  \n",
            " block3b_expand_activation (Act  (None, None, None,   0          ['block3b_expand_bn[0][0]']      \n",
            " ivation)                       240)                                                              \n",
            "                                                                                                  \n",
            " block3b_dwconv (DepthwiseConv2  (None, None, None,   6000       ['block3b_expand_activation[0][0]\n",
            " D)                             240)                             ']                               \n",
            "                                                                                                  \n",
            " block3b_bn (BatchNormalization  (None, None, None,   960        ['block3b_dwconv[0][0]']         \n",
            " )                              240)                                                              \n",
            "                                                                                                  \n",
            " block3b_activation (Activation  (None, None, None,   0          ['block3b_bn[0][0]']             \n",
            " )                              240)                                                              \n",
            "                                                                                                  \n",
            " block3b_se_squeeze (GlobalAver  (None, 240)         0           ['block3b_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block3b_se_reshape (Reshape)   (None, 1, 1, 240)    0           ['block3b_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block3b_se_reduce (Conv2D)     (None, 1, 1, 10)     2410        ['block3b_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block3b_se_expand (Conv2D)     (None, 1, 1, 240)    2640        ['block3b_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block3b_se_excite (Multiply)   (None, None, None,   0           ['block3b_activation[0][0]',     \n",
            "                                240)                              'block3b_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block3b_project_conv (Conv2D)  (None, None, None,   9600        ['block3b_se_excite[0][0]']      \n",
            "                                40)                                                               \n",
            "                                                                                                  \n",
            " block3b_project_bn (BatchNorma  (None, None, None,   160        ['block3b_project_conv[0][0]']   \n",
            " lization)                      40)                                                               \n",
            "                                                                                                  \n",
            " block3b_drop (Dropout)         (None, None, None,   0           ['block3b_project_bn[0][0]']     \n",
            "                                40)                                                               \n",
            "                                                                                                  \n",
            " block3b_add (Add)              (None, None, None,   0           ['block3b_drop[0][0]',           \n",
            "                                40)                               'block3a_project_bn[0][0]']     \n",
            "                                                                                                  \n",
            " block4a_expand_conv (Conv2D)   (None, None, None,   9600        ['block3b_add[0][0]']            \n",
            "                                240)                                                              \n",
            "                                                                                                  \n",
            " block4a_expand_bn (BatchNormal  (None, None, None,   960        ['block4a_expand_conv[0][0]']    \n",
            " ization)                       240)                                                              \n",
            "                                                                                                  \n",
            " block4a_expand_activation (Act  (None, None, None,   0          ['block4a_expand_bn[0][0]']      \n",
            " ivation)                       240)                                                              \n",
            "                                                                                                  \n",
            " block4a_dwconv_pad (ZeroPaddin  (None, None, None,   0          ['block4a_expand_activation[0][0]\n",
            " g2D)                           240)                             ']                               \n",
            "                                                                                                  \n",
            " block4a_dwconv (DepthwiseConv2  (None, None, None,   2160       ['block4a_dwconv_pad[0][0]']     \n",
            " D)                             240)                                                              \n",
            "                                                                                                  \n",
            " block4a_bn (BatchNormalization  (None, None, None,   960        ['block4a_dwconv[0][0]']         \n",
            " )                              240)                                                              \n",
            "                                                                                                  \n",
            " block4a_activation (Activation  (None, None, None,   0          ['block4a_bn[0][0]']             \n",
            " )                              240)                                                              \n",
            "                                                                                                  \n",
            " block4a_se_squeeze (GlobalAver  (None, 240)         0           ['block4a_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block4a_se_reshape (Reshape)   (None, 1, 1, 240)    0           ['block4a_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block4a_se_reduce (Conv2D)     (None, 1, 1, 10)     2410        ['block4a_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block4a_se_expand (Conv2D)     (None, 1, 1, 240)    2640        ['block4a_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block4a_se_excite (Multiply)   (None, None, None,   0           ['block4a_activation[0][0]',     \n",
            "                                240)                              'block4a_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block4a_project_conv (Conv2D)  (None, None, None,   19200       ['block4a_se_excite[0][0]']      \n",
            "                                80)                                                               \n",
            "                                                                                                  \n",
            " block4a_project_bn (BatchNorma  (None, None, None,   320        ['block4a_project_conv[0][0]']   \n",
            " lization)                      80)                                                               \n",
            "                                                                                                  \n",
            " block4b_expand_conv (Conv2D)   (None, None, None,   38400       ['block4a_project_bn[0][0]']     \n",
            "                                480)                                                              \n",
            "                                                                                                  \n",
            " block4b_expand_bn (BatchNormal  (None, None, None,   1920       ['block4b_expand_conv[0][0]']    \n",
            " ization)                       480)                                                              \n",
            "                                                                                                  \n",
            " block4b_expand_activation (Act  (None, None, None,   0          ['block4b_expand_bn[0][0]']      \n",
            " ivation)                       480)                                                              \n",
            "                                                                                                  \n",
            " block4b_dwconv (DepthwiseConv2  (None, None, None,   4320       ['block4b_expand_activation[0][0]\n",
            " D)                             480)                             ']                               \n",
            "                                                                                                  \n",
            " block4b_bn (BatchNormalization  (None, None, None,   1920       ['block4b_dwconv[0][0]']         \n",
            " )                              480)                                                              \n",
            "                                                                                                  \n",
            " block4b_activation (Activation  (None, None, None,   0          ['block4b_bn[0][0]']             \n",
            " )                              480)                                                              \n",
            "                                                                                                  \n",
            " block4b_se_squeeze (GlobalAver  (None, 480)         0           ['block4b_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block4b_se_reshape (Reshape)   (None, 1, 1, 480)    0           ['block4b_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block4b_se_reduce (Conv2D)     (None, 1, 1, 20)     9620        ['block4b_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block4b_se_expand (Conv2D)     (None, 1, 1, 480)    10080       ['block4b_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block4b_se_excite (Multiply)   (None, None, None,   0           ['block4b_activation[0][0]',     \n",
            "                                480)                              'block4b_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block4b_project_conv (Conv2D)  (None, None, None,   38400       ['block4b_se_excite[0][0]']      \n",
            "                                80)                                                               \n",
            "                                                                                                  \n",
            " block4b_project_bn (BatchNorma  (None, None, None,   320        ['block4b_project_conv[0][0]']   \n",
            " lization)                      80)                                                               \n",
            "                                                                                                  \n",
            " block4b_drop (Dropout)         (None, None, None,   0           ['block4b_project_bn[0][0]']     \n",
            "                                80)                                                               \n",
            "                                                                                                  \n",
            " block4b_add (Add)              (None, None, None,   0           ['block4b_drop[0][0]',           \n",
            "                                80)                               'block4a_project_bn[0][0]']     \n",
            "                                                                                                  \n",
            " block4c_expand_conv (Conv2D)   (None, None, None,   38400       ['block4b_add[0][0]']            \n",
            "                                480)                                                              \n",
            "                                                                                                  \n",
            " block4c_expand_bn (BatchNormal  (None, None, None,   1920       ['block4c_expand_conv[0][0]']    \n",
            " ization)                       480)                                                              \n",
            "                                                                                                  \n",
            " block4c_expand_activation (Act  (None, None, None,   0          ['block4c_expand_bn[0][0]']      \n",
            " ivation)                       480)                                                              \n",
            "                                                                                                  \n",
            " block4c_dwconv (DepthwiseConv2  (None, None, None,   4320       ['block4c_expand_activation[0][0]\n",
            " D)                             480)                             ']                               \n",
            "                                                                                                  \n",
            " block4c_bn (BatchNormalization  (None, None, None,   1920       ['block4c_dwconv[0][0]']         \n",
            " )                              480)                                                              \n",
            "                                                                                                  \n",
            " block4c_activation (Activation  (None, None, None,   0          ['block4c_bn[0][0]']             \n",
            " )                              480)                                                              \n",
            "                                                                                                  \n",
            " block4c_se_squeeze (GlobalAver  (None, 480)         0           ['block4c_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block4c_se_reshape (Reshape)   (None, 1, 1, 480)    0           ['block4c_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block4c_se_reduce (Conv2D)     (None, 1, 1, 20)     9620        ['block4c_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block4c_se_expand (Conv2D)     (None, 1, 1, 480)    10080       ['block4c_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block4c_se_excite (Multiply)   (None, None, None,   0           ['block4c_activation[0][0]',     \n",
            "                                480)                              'block4c_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block4c_project_conv (Conv2D)  (None, None, None,   38400       ['block4c_se_excite[0][0]']      \n",
            "                                80)                                                               \n",
            "                                                                                                  \n",
            " block4c_project_bn (BatchNorma  (None, None, None,   320        ['block4c_project_conv[0][0]']   \n",
            " lization)                      80)                                                               \n",
            "                                                                                                  \n",
            " block4c_drop (Dropout)         (None, None, None,   0           ['block4c_project_bn[0][0]']     \n",
            "                                80)                                                               \n",
            "                                                                                                  \n",
            " block4c_add (Add)              (None, None, None,   0           ['block4c_drop[0][0]',           \n",
            "                                80)                               'block4b_add[0][0]']            \n",
            "                                                                                                  \n",
            " block5a_expand_conv (Conv2D)   (None, None, None,   38400       ['block4c_add[0][0]']            \n",
            "                                480)                                                              \n",
            "                                                                                                  \n",
            " block5a_expand_bn (BatchNormal  (None, None, None,   1920       ['block5a_expand_conv[0][0]']    \n",
            " ization)                       480)                                                              \n",
            "                                                                                                  \n",
            " block5a_expand_activation (Act  (None, None, None,   0          ['block5a_expand_bn[0][0]']      \n",
            " ivation)                       480)                                                              \n",
            "                                                                                                  \n",
            " block5a_dwconv (DepthwiseConv2  (None, None, None,   12000      ['block5a_expand_activation[0][0]\n",
            " D)                             480)                             ']                               \n",
            "                                                                                                  \n",
            " block5a_bn (BatchNormalization  (None, None, None,   1920       ['block5a_dwconv[0][0]']         \n",
            " )                              480)                                                              \n",
            "                                                                                                  \n",
            " block5a_activation (Activation  (None, None, None,   0          ['block5a_bn[0][0]']             \n",
            " )                              480)                                                              \n",
            "                                                                                                  \n",
            " block5a_se_squeeze (GlobalAver  (None, 480)         0           ['block5a_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block5a_se_reshape (Reshape)   (None, 1, 1, 480)    0           ['block5a_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block5a_se_reduce (Conv2D)     (None, 1, 1, 20)     9620        ['block5a_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block5a_se_expand (Conv2D)     (None, 1, 1, 480)    10080       ['block5a_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block5a_se_excite (Multiply)   (None, None, None,   0           ['block5a_activation[0][0]',     \n",
            "                                480)                              'block5a_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block5a_project_conv (Conv2D)  (None, None, None,   53760       ['block5a_se_excite[0][0]']      \n",
            "                                112)                                                              \n",
            "                                                                                                  \n",
            " block5a_project_bn (BatchNorma  (None, None, None,   448        ['block5a_project_conv[0][0]']   \n",
            " lization)                      112)                                                              \n",
            "                                                                                                  \n",
            " block5b_expand_conv (Conv2D)   (None, None, None,   75264       ['block5a_project_bn[0][0]']     \n",
            "                                672)                                                              \n",
            "                                                                                                  \n",
            " block5b_expand_bn (BatchNormal  (None, None, None,   2688       ['block5b_expand_conv[0][0]']    \n",
            " ization)                       672)                                                              \n",
            "                                                                                                  \n",
            " block5b_expand_activation (Act  (None, None, None,   0          ['block5b_expand_bn[0][0]']      \n",
            " ivation)                       672)                                                              \n",
            "                                                                                                  \n",
            " block5b_dwconv (DepthwiseConv2  (None, None, None,   16800      ['block5b_expand_activation[0][0]\n",
            " D)                             672)                             ']                               \n",
            "                                                                                                  \n",
            " block5b_bn (BatchNormalization  (None, None, None,   2688       ['block5b_dwconv[0][0]']         \n",
            " )                              672)                                                              \n",
            "                                                                                                  \n",
            " block5b_activation (Activation  (None, None, None,   0          ['block5b_bn[0][0]']             \n",
            " )                              672)                                                              \n",
            "                                                                                                  \n",
            " block5b_se_squeeze (GlobalAver  (None, 672)         0           ['block5b_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block5b_se_reshape (Reshape)   (None, 1, 1, 672)    0           ['block5b_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block5b_se_reduce (Conv2D)     (None, 1, 1, 28)     18844       ['block5b_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block5b_se_expand (Conv2D)     (None, 1, 1, 672)    19488       ['block5b_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block5b_se_excite (Multiply)   (None, None, None,   0           ['block5b_activation[0][0]',     \n",
            "                                672)                              'block5b_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block5b_project_conv (Conv2D)  (None, None, None,   75264       ['block5b_se_excite[0][0]']      \n",
            "                                112)                                                              \n",
            "                                                                                                  \n",
            " block5b_project_bn (BatchNorma  (None, None, None,   448        ['block5b_project_conv[0][0]']   \n",
            " lization)                      112)                                                              \n",
            "                                                                                                  \n",
            " block5b_drop (Dropout)         (None, None, None,   0           ['block5b_project_bn[0][0]']     \n",
            "                                112)                                                              \n",
            "                                                                                                  \n",
            " block5b_add (Add)              (None, None, None,   0           ['block5b_drop[0][0]',           \n",
            "                                112)                              'block5a_project_bn[0][0]']     \n",
            "                                                                                                  \n",
            " block5c_expand_conv (Conv2D)   (None, None, None,   75264       ['block5b_add[0][0]']            \n",
            "                                672)                                                              \n",
            "                                                                                                  \n",
            " block5c_expand_bn (BatchNormal  (None, None, None,   2688       ['block5c_expand_conv[0][0]']    \n",
            " ization)                       672)                                                              \n",
            "                                                                                                  \n",
            " block5c_expand_activation (Act  (None, None, None,   0          ['block5c_expand_bn[0][0]']      \n",
            " ivation)                       672)                                                              \n",
            "                                                                                                  \n",
            " block5c_dwconv (DepthwiseConv2  (None, None, None,   16800      ['block5c_expand_activation[0][0]\n",
            " D)                             672)                             ']                               \n",
            "                                                                                                  \n",
            " block5c_bn (BatchNormalization  (None, None, None,   2688       ['block5c_dwconv[0][0]']         \n",
            " )                              672)                                                              \n",
            "                                                                                                  \n",
            " block5c_activation (Activation  (None, None, None,   0          ['block5c_bn[0][0]']             \n",
            " )                              672)                                                              \n",
            "                                                                                                  \n",
            " block5c_se_squeeze (GlobalAver  (None, 672)         0           ['block5c_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block5c_se_reshape (Reshape)   (None, 1, 1, 672)    0           ['block5c_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block5c_se_reduce (Conv2D)     (None, 1, 1, 28)     18844       ['block5c_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block5c_se_expand (Conv2D)     (None, 1, 1, 672)    19488       ['block5c_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block5c_se_excite (Multiply)   (None, None, None,   0           ['block5c_activation[0][0]',     \n",
            "                                672)                              'block5c_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block5c_project_conv (Conv2D)  (None, None, None,   75264       ['block5c_se_excite[0][0]']      \n",
            "                                112)                                                              \n",
            "                                                                                                  \n",
            " block5c_project_bn (BatchNorma  (None, None, None,   448        ['block5c_project_conv[0][0]']   \n",
            " lization)                      112)                                                              \n",
            "                                                                                                  \n",
            " block5c_drop (Dropout)         (None, None, None,   0           ['block5c_project_bn[0][0]']     \n",
            "                                112)                                                              \n",
            "                                                                                                  \n",
            " block5c_add (Add)              (None, None, None,   0           ['block5c_drop[0][0]',           \n",
            "                                112)                              'block5b_add[0][0]']            \n",
            "                                                                                                  \n",
            " block6a_expand_conv (Conv2D)   (None, None, None,   75264       ['block5c_add[0][0]']            \n",
            "                                672)                                                              \n",
            "                                                                                                  \n",
            " block6a_expand_bn (BatchNormal  (None, None, None,   2688       ['block6a_expand_conv[0][0]']    \n",
            " ization)                       672)                                                              \n",
            "                                                                                                  \n",
            " block6a_expand_activation (Act  (None, None, None,   0          ['block6a_expand_bn[0][0]']      \n",
            " ivation)                       672)                                                              \n",
            "                                                                                                  \n",
            " block6a_dwconv_pad (ZeroPaddin  (None, None, None,   0          ['block6a_expand_activation[0][0]\n",
            " g2D)                           672)                             ']                               \n",
            "                                                                                                  \n",
            " block6a_dwconv (DepthwiseConv2  (None, None, None,   16800      ['block6a_dwconv_pad[0][0]']     \n",
            " D)                             672)                                                              \n",
            "                                                                                                  \n",
            " block6a_bn (BatchNormalization  (None, None, None,   2688       ['block6a_dwconv[0][0]']         \n",
            " )                              672)                                                              \n",
            "                                                                                                  \n",
            " block6a_activation (Activation  (None, None, None,   0          ['block6a_bn[0][0]']             \n",
            " )                              672)                                                              \n",
            "                                                                                                  \n",
            " block6a_se_squeeze (GlobalAver  (None, 672)         0           ['block6a_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block6a_se_reshape (Reshape)   (None, 1, 1, 672)    0           ['block6a_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block6a_se_reduce (Conv2D)     (None, 1, 1, 28)     18844       ['block6a_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block6a_se_expand (Conv2D)     (None, 1, 1, 672)    19488       ['block6a_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block6a_se_excite (Multiply)   (None, None, None,   0           ['block6a_activation[0][0]',     \n",
            "                                672)                              'block6a_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block6a_project_conv (Conv2D)  (None, None, None,   129024      ['block6a_se_excite[0][0]']      \n",
            "                                192)                                                              \n",
            "                                                                                                  \n",
            " block6a_project_bn (BatchNorma  (None, None, None,   768        ['block6a_project_conv[0][0]']   \n",
            " lization)                      192)                                                              \n",
            "                                                                                                  \n",
            " block6b_expand_conv (Conv2D)   (None, None, None,   221184      ['block6a_project_bn[0][0]']     \n",
            "                                1152)                                                             \n",
            "                                                                                                  \n",
            " block6b_expand_bn (BatchNormal  (None, None, None,   4608       ['block6b_expand_conv[0][0]']    \n",
            " ization)                       1152)                                                             \n",
            "                                                                                                  \n",
            " block6b_expand_activation (Act  (None, None, None,   0          ['block6b_expand_bn[0][0]']      \n",
            " ivation)                       1152)                                                             \n",
            "                                                                                                  \n",
            " block6b_dwconv (DepthwiseConv2  (None, None, None,   28800      ['block6b_expand_activation[0][0]\n",
            " D)                             1152)                            ']                               \n",
            "                                                                                                  \n",
            " block6b_bn (BatchNormalization  (None, None, None,   4608       ['block6b_dwconv[0][0]']         \n",
            " )                              1152)                                                             \n",
            "                                                                                                  \n",
            " block6b_activation (Activation  (None, None, None,   0          ['block6b_bn[0][0]']             \n",
            " )                              1152)                                                             \n",
            "                                                                                                  \n",
            " block6b_se_squeeze (GlobalAver  (None, 1152)        0           ['block6b_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block6b_se_reshape (Reshape)   (None, 1, 1, 1152)   0           ['block6b_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block6b_se_reduce (Conv2D)     (None, 1, 1, 48)     55344       ['block6b_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block6b_se_expand (Conv2D)     (None, 1, 1, 1152)   56448       ['block6b_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block6b_se_excite (Multiply)   (None, None, None,   0           ['block6b_activation[0][0]',     \n",
            "                                1152)                             'block6b_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block6b_project_conv (Conv2D)  (None, None, None,   221184      ['block6b_se_excite[0][0]']      \n",
            "                                192)                                                              \n",
            "                                                                                                  \n",
            " block6b_project_bn (BatchNorma  (None, None, None,   768        ['block6b_project_conv[0][0]']   \n",
            " lization)                      192)                                                              \n",
            "                                                                                                  \n",
            " block6b_drop (Dropout)         (None, None, None,   0           ['block6b_project_bn[0][0]']     \n",
            "                                192)                                                              \n",
            "                                                                                                  \n",
            " block6b_add (Add)              (None, None, None,   0           ['block6b_drop[0][0]',           \n",
            "                                192)                              'block6a_project_bn[0][0]']     \n",
            "                                                                                                  \n",
            " block6c_expand_conv (Conv2D)   (None, None, None,   221184      ['block6b_add[0][0]']            \n",
            "                                1152)                                                             \n",
            "                                                                                                  \n",
            " block6c_expand_bn (BatchNormal  (None, None, None,   4608       ['block6c_expand_conv[0][0]']    \n",
            " ization)                       1152)                                                             \n",
            "                                                                                                  \n",
            " block6c_expand_activation (Act  (None, None, None,   0          ['block6c_expand_bn[0][0]']      \n",
            " ivation)                       1152)                                                             \n",
            "                                                                                                  \n",
            " block6c_dwconv (DepthwiseConv2  (None, None, None,   28800      ['block6c_expand_activation[0][0]\n",
            " D)                             1152)                            ']                               \n",
            "                                                                                                  \n",
            " block6c_bn (BatchNormalization  (None, None, None,   4608       ['block6c_dwconv[0][0]']         \n",
            " )                              1152)                                                             \n",
            "                                                                                                  \n",
            " block6c_activation (Activation  (None, None, None,   0          ['block6c_bn[0][0]']             \n",
            " )                              1152)                                                             \n",
            "                                                                                                  \n",
            " block6c_se_squeeze (GlobalAver  (None, 1152)        0           ['block6c_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block6c_se_reshape (Reshape)   (None, 1, 1, 1152)   0           ['block6c_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block6c_se_reduce (Conv2D)     (None, 1, 1, 48)     55344       ['block6c_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block6c_se_expand (Conv2D)     (None, 1, 1, 1152)   56448       ['block6c_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block6c_se_excite (Multiply)   (None, None, None,   0           ['block6c_activation[0][0]',     \n",
            "                                1152)                             'block6c_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block6c_project_conv (Conv2D)  (None, None, None,   221184      ['block6c_se_excite[0][0]']      \n",
            "                                192)                                                              \n",
            "                                                                                                  \n",
            " block6c_project_bn (BatchNorma  (None, None, None,   768        ['block6c_project_conv[0][0]']   \n",
            " lization)                      192)                                                              \n",
            "                                                                                                  \n",
            " block6c_drop (Dropout)         (None, None, None,   0           ['block6c_project_bn[0][0]']     \n",
            "                                192)                                                              \n",
            "                                                                                                  \n",
            " block6c_add (Add)              (None, None, None,   0           ['block6c_drop[0][0]',           \n",
            "                                192)                              'block6b_add[0][0]']            \n",
            "                                                                                                  \n",
            " block6d_expand_conv (Conv2D)   (None, None, None,   221184      ['block6c_add[0][0]']            \n",
            "                                1152)                                                             \n",
            "                                                                                                  \n",
            " block6d_expand_bn (BatchNormal  (None, None, None,   4608       ['block6d_expand_conv[0][0]']    \n",
            " ization)                       1152)                                                             \n",
            "                                                                                                  \n",
            " block6d_expand_activation (Act  (None, None, None,   0          ['block6d_expand_bn[0][0]']      \n",
            " ivation)                       1152)                                                             \n",
            "                                                                                                  \n",
            " block6d_dwconv (DepthwiseConv2  (None, None, None,   28800      ['block6d_expand_activation[0][0]\n",
            " D)                             1152)                            ']                               \n",
            "                                                                                                  \n",
            " block6d_bn (BatchNormalization  (None, None, None,   4608       ['block6d_dwconv[0][0]']         \n",
            " )                              1152)                                                             \n",
            "                                                                                                  \n",
            " block6d_activation (Activation  (None, None, None,   0          ['block6d_bn[0][0]']             \n",
            " )                              1152)                                                             \n",
            "                                                                                                  \n",
            " block6d_se_squeeze (GlobalAver  (None, 1152)        0           ['block6d_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block6d_se_reshape (Reshape)   (None, 1, 1, 1152)   0           ['block6d_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block6d_se_reduce (Conv2D)     (None, 1, 1, 48)     55344       ['block6d_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block6d_se_expand (Conv2D)     (None, 1, 1, 1152)   56448       ['block6d_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block6d_se_excite (Multiply)   (None, None, None,   0           ['block6d_activation[0][0]',     \n",
            "                                1152)                             'block6d_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block6d_project_conv (Conv2D)  (None, None, None,   221184      ['block6d_se_excite[0][0]']      \n",
            "                                192)                                                              \n",
            "                                                                                                  \n",
            " block6d_project_bn (BatchNorma  (None, None, None,   768        ['block6d_project_conv[0][0]']   \n",
            " lization)                      192)                                                              \n",
            "                                                                                                  \n",
            " block6d_drop (Dropout)         (None, None, None,   0           ['block6d_project_bn[0][0]']     \n",
            "                                192)                                                              \n",
            "                                                                                                  \n",
            " block6d_add (Add)              (None, None, None,   0           ['block6d_drop[0][0]',           \n",
            "                                192)                              'block6c_add[0][0]']            \n",
            "                                                                                                  \n",
            " block7a_expand_conv (Conv2D)   (None, None, None,   221184      ['block6d_add[0][0]']            \n",
            "                                1152)                                                             \n",
            "                                                                                                  \n",
            " block7a_expand_bn (BatchNormal  (None, None, None,   4608       ['block7a_expand_conv[0][0]']    \n",
            " ization)                       1152)                                                             \n",
            "                                                                                                  \n",
            " block7a_expand_activation (Act  (None, None, None,   0          ['block7a_expand_bn[0][0]']      \n",
            " ivation)                       1152)                                                             \n",
            "                                                                                                  \n",
            " block7a_dwconv (DepthwiseConv2  (None, None, None,   10368      ['block7a_expand_activation[0][0]\n",
            " D)                             1152)                            ']                               \n",
            "                                                                                                  \n",
            " block7a_bn (BatchNormalization  (None, None, None,   4608       ['block7a_dwconv[0][0]']         \n",
            " )                              1152)                                                             \n",
            "                                                                                                  \n",
            " block7a_activation (Activation  (None, None, None,   0          ['block7a_bn[0][0]']             \n",
            " )                              1152)                                                             \n",
            "                                                                                                  \n",
            " block7a_se_squeeze (GlobalAver  (None, 1152)        0           ['block7a_activation[0][0]']     \n",
            " agePooling2D)                                                                                    \n",
            "                                                                                                  \n",
            " block7a_se_reshape (Reshape)   (None, 1, 1, 1152)   0           ['block7a_se_squeeze[0][0]']     \n",
            "                                                                                                  \n",
            " block7a_se_reduce (Conv2D)     (None, 1, 1, 48)     55344       ['block7a_se_reshape[0][0]']     \n",
            "                                                                                                  \n",
            " block7a_se_expand (Conv2D)     (None, 1, 1, 1152)   56448       ['block7a_se_reduce[0][0]']      \n",
            "                                                                                                  \n",
            " block7a_se_excite (Multiply)   (None, None, None,   0           ['block7a_activation[0][0]',     \n",
            "                                1152)                             'block7a_se_expand[0][0]']      \n",
            "                                                                                                  \n",
            " block7a_project_conv (Conv2D)  (None, None, None,   368640      ['block7a_se_excite[0][0]']      \n",
            "                                320)                                                              \n",
            "                                                                                                  \n",
            " block7a_project_bn (BatchNorma  (None, None, None,   1280       ['block7a_project_conv[0][0]']   \n",
            " lization)                      320)                                                              \n",
            "                                                                                                  \n",
            " top_conv (Conv2D)              (None, None, None,   409600      ['block7a_project_bn[0][0]']     \n",
            "                                1280)                                                             \n",
            "                                                                                                  \n",
            " top_bn (BatchNormalization)    (None, None, None,   5120        ['top_conv[0][0]']               \n",
            "                                1280)                                                             \n",
            "                                                                                                  \n",
            " top_activation (Activation)    (None, None, None,   0           ['top_bn[0][0]']                 \n",
            "                                1280)                                                             \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 4,049,571\n",
            "Trainable params: 0\n",
            "Non-trainable params: 4,049,571\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "# checkout the model summary\n",
        "base_model.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "ArouVs1VJIko",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "720ba373-18eb-41c1-9dea-be2b4f5b5d05"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " input_layer (InputLayer)    [(None, 224, 224, 3)]     0         \n",
            "                                                                 \n",
            " efficientnetb0 (Functional)  (None, None, None, 1280)  4049571  \n",
            "                                                                 \n",
            " global_average_pooling (Glo  (None, 1280)             0         \n",
            " balAveragePooling2D)                                            \n",
            "                                                                 \n",
            " output_layer (Dense)        (None, 10)                12810     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 4,062,381\n",
            "Trainable params: 12,810\n",
            "Non-trainable params: 4,049,571\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "model_0.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "srDGQKnsJTZ9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "outputId": "3b22a667-4ae6-4d2e-bee8-5e8c01f66753"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# visualize the model performance\n",
        "plot_loss_curves(history_0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "bhBU9fFuKHG8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5ab9aada-3411-4c86-b1f4-d9f48f74206a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2022-08-06 19:21:33--  https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_1_percent.zip\n",
            "Resolving storage.googleapis.com (storage.googleapis.com)... 142.251.45.112, 142.251.45.16, 172.253.62.128, ...\n",
            "Connecting to storage.googleapis.com (storage.googleapis.com)|142.251.45.112|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 133612354 (127M) [application/zip]\n",
            "Saving to: ‘10_food_classes_1_percent.zip’\n",
            "\n",
            "10_food_classes_1_p 100%[===================>] 127.42M   264MB/s    in 0.5s    \n",
            "\n",
            "2022-08-06 19:21:34 (264 MB/s) - ‘10_food_classes_1_percent.zip’ saved [133612354/133612354]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# download the 1% zip data\n",
        "!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_1_percent.zip"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "Rd1MIanhL2tr"
      },
      "outputs": [],
      "source": [
        "# let's unzip the data....\n",
        "import zipfile\n",
        "zipfile = zipfile.ZipFile(\"/content/10_food_classes_1_percent.zip\")\n",
        "zipfile.extractall()\n",
        "zipfile.close()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "Tx8D8w0BMLrY"
      },
      "outputs": [],
      "source": [
        "# creating directories of 1% data\n",
        "# /content/10_food_classes_1_percent/train\n",
        "train_dir_1_percent = \"/content/10_food_classes_1_percent/train\"\n",
        "test_dir_1_percent = \"/content/10_food_classes_1_percent/test/\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "agW0nraXMlGB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "75e10c14-0054-4a44-e83b-38e5b139213a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 2 directories and 0 images in 10_food_classes_1_percent.\n",
            "There are 10 directories and 0 images in 10_food_classes_1_percent/train.\n",
            "There are 0 directories and 7 images in 10_food_classes_1_percent/train/pizza.\n",
            "There are 0 directories and 7 images in 10_food_classes_1_percent/train/grilled_salmon.\n",
            "There are 0 directories and 7 images in 10_food_classes_1_percent/train/hamburger.\n",
            "There are 0 directories and 7 images in 10_food_classes_1_percent/train/steak.\n",
            "There are 0 directories and 7 images in 10_food_classes_1_percent/train/chicken_curry.\n",
            "There are 0 directories and 7 images in 10_food_classes_1_percent/train/ramen.\n",
            "There are 0 directories and 7 images in 10_food_classes_1_percent/train/sushi.\n",
            "There are 0 directories and 7 images in 10_food_classes_1_percent/train/fried_rice.\n",
            "There are 0 directories and 7 images in 10_food_classes_1_percent/train/chicken_wings.\n",
            "There are 0 directories and 7 images in 10_food_classes_1_percent/train/ice_cream.\n",
            "There are 10 directories and 0 images in 10_food_classes_1_percent/test.\n",
            "There are 0 directories and 250 images in 10_food_classes_1_percent/test/pizza.\n",
            "There are 0 directories and 250 images in 10_food_classes_1_percent/test/grilled_salmon.\n",
            "There are 0 directories and 250 images in 10_food_classes_1_percent/test/hamburger.\n",
            "There are 0 directories and 250 images in 10_food_classes_1_percent/test/steak.\n",
            "There are 0 directories and 250 images in 10_food_classes_1_percent/test/chicken_curry.\n",
            "There are 0 directories and 250 images in 10_food_classes_1_percent/test/ramen.\n",
            "There are 0 directories and 250 images in 10_food_classes_1_percent/test/sushi.\n",
            "There are 0 directories and 250 images in 10_food_classes_1_percent/test/fried_rice.\n",
            "There are 0 directories and 250 images in 10_food_classes_1_percent/test/chicken_wings.\n",
            "There are 0 directories and 250 images in 10_food_classes_1_percent/test/ice_cream.\n"
          ]
        }
      ],
      "source": [
        "# but first let's walk through the directory\n",
        "for dirpath,dirnames,filenames in os.walk(\"10_food_classes_1_percent\"):\n",
        "  print(f\"There are {len(dirnames)} directories and {len(filenames)} images in {dirpath}.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "2TE1g6jCNDEd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8d491141-2d6a-4895-d8da-3c8c690da2fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 70 files belonging to 10 classes.\n",
            "Found 2500 files belonging to 10 classes.\n"
          ]
        }
      ],
      "source": [
        "# let's load our images...\n",
        "IMAGE_SIZE = (224,224)\n",
        "\n",
        "train_data_1_percent = tf.keras.preprocessing.image_dataset_from_directory(train_dir_1_percent,\n",
        "                                                                           label_mode='categorical',\n",
        "                                                                           batch_size=32,image_size=IMAGE_SIZE)\n",
        "test_data = tf.keras.preprocessing.image_dataset_from_directory(test_dir_1_percent,\n",
        "                                                                label_mode='categorical',\n",
        "                                                                image_size=IMAGE_SIZE)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "rTz5I5kpWH5c"
      },
      "outputs": [],
      "source": [
        "# previously we do data-augmentation in the ImageDataGenerator to augment our training images,this time we're going to build data\n",
        "# augmentation right into the model\n",
        "\n",
        "# create data-augmentation stage with horizontal flipping, rotation, zooms\n",
        "data_augmentation = Sequential([\n",
        "    preprocessing.RandomFlip('horizontal'),\n",
        "    preprocessing.RandomZoom(0.2),\n",
        "    preprocessing.RandomRotation(0.2),\n",
        "    preprocessing.RandomHeight(0.2),\n",
        "    preprocessing.RandomWidth(0.2),],name=\"data_augmentation\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BioiCvKaZZsJ"
      },
      "source": [
        "## Model 1 : Feautr Extraction model on 1% data with data augmentation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "A0HiK-8gZW8v",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "853afce3-cf8e-47a4-b173-da44a8ab8241"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving TensorBoard Files to : transfer_learning/1_percent_data_aug/20220806-192138\n",
            "Epoch 1/5\n",
            "3/3 [==============================] - 15s 4s/step - loss: 2.4304 - accuracy: 0.1000 - val_loss: 2.3920 - val_accuracy: 0.0773\n",
            "Epoch 2/5\n",
            "3/3 [==============================] - 3s 1s/step - loss: 2.1939 - accuracy: 0.1714 - val_loss: 2.2664 - val_accuracy: 0.1299\n",
            "Epoch 3/5\n",
            "3/3 [==============================] - 4s 2s/step - loss: 2.0339 - accuracy: 0.3714 - val_loss: 2.1535 - val_accuracy: 0.2220\n",
            "Epoch 4/5\n",
            "3/3 [==============================] - 3s 1s/step - loss: 1.7851 - accuracy: 0.5714 - val_loss: 2.0646 - val_accuracy: 0.3010\n",
            "Epoch 5/5\n",
            "3/3 [==============================] - 4s 2s/step - loss: 1.7229 - accuracy: 0.5857 - val_loss: 1.9705 - val_accuracy: 0.3454\n"
          ]
        }
      ],
      "source": [
        "# let's build the model\n",
        "# set the random seed\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# set-up the base-model\n",
        "base_model = tf.keras.applications.EfficientNetB0(include_top=False)\n",
        "\n",
        "# frooze the pre-trained learned patterns\n",
        "base_model.trainable=False\n",
        "\n",
        "# setting up the inputs \n",
        "inputs = tf.keras.layers.Input(shape=(224,224,3),name='input_layer')\n",
        "\n",
        "# setting up the data-augmentation\n",
        "x = data_augmentation(inputs)\n",
        "\n",
        "# give the base model inputs after data-augmentation\n",
        "x = base_model(x,training=False)\n",
        "\n",
        "# pool the features\n",
        "x = tf.keras.layers.GlobalAveragePooling2D(name='pooling_layer')(x)\n",
        "\n",
        "# output layer\n",
        "outputs = tf.keras.layers.Dense(10,activation='softmax',name='output_layer')(x)\n",
        "\n",
        "# combining the layers and making up the model\n",
        "model_1 = tf.keras.Model(inputs,outputs)\n",
        "\n",
        "# compile the model\n",
        "model_1.compile(loss='categorical_crossentropy',\n",
        "                optimizer=tf.keras.optimizers.Adam(),\n",
        "                metrics=['accuracy'])\n",
        "\n",
        "# fitting the model\n",
        "history_1 = model_1.fit(train_data_1_percent,\n",
        "                        epochs=5,\n",
        "                        steps_per_epoch= len(train_data_1_percent),\n",
        "                        validation_data = test_data,\n",
        "                        validation_steps = int(0.25 * len(test_data)),\n",
        "                        callbacks = [create_tensorboard_callback('transfer_learning',\"1_percent_data_aug\")])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "cA0iZxbicCwY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "154fdbf6-2f5f-4c46-d073-b54182548668"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_1\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " input_layer (InputLayer)    [(None, 224, 224, 3)]     0         \n",
            "                                                                 \n",
            " data_augmentation (Sequenti  (None, 224, 224, 3)      0         \n",
            " al)                                                             \n",
            "                                                                 \n",
            " efficientnetb0 (Functional)  (None, None, None, 1280)  4049571  \n",
            "                                                                 \n",
            " pooling_layer (GlobalAverag  (None, 1280)             0         \n",
            " ePooling2D)                                                     \n",
            "                                                                 \n",
            " output_layer (Dense)        (None, 10)                12810     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 4,062,381\n",
            "Trainable params: 12,810\n",
            "Non-trainable params: 4,049,571\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "# let's check-out the model summary\n",
        "model_1.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "qG26Qc8ocqLT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "outputId": "e602bbf9-622f-42ca-8211-95462ceeb340"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# visualize the model performance\n",
        "plot_loss_curves(history_1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RC7UN_T_c8hq"
      },
      "source": [
        "## Model 2 : Feature extraction transfer learning on 10% with data-augmentation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 81,
      "metadata": {
        "id": "qXSI9pFXczzh"
      },
      "outputs": [],
      "source": [
        "# make dir for 10% data\n",
        "train_dir_10_percent = \"10_food_classes_10_percent/train/\"\n",
        "test_dir = \"10_food_classes_10_percent/test/\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 82,
      "metadata": {
        "id": "Sm6KcfWwdm_-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "32e270dd-4c3a-4db5-855b-96443b1bcecb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 750 files belonging to 10 classes.\n",
            "Found 2500 files belonging to 10 classes.\n"
          ]
        }
      ],
      "source": [
        "# create the data-loaders for augmentation\n",
        "IMAGE_SHAPE = (224,224)\n",
        "train_data_10_percent = tf.keras.preprocessing.image_dataset_from_directory(train_dir_10_percent,\n",
        "                                                                            image_size=IMAGE_SHAPE,\n",
        "                                                                            label_mode='categorical',\n",
        "                                                                            )\n",
        "test_data = tf.keras.preprocessing.image_dataset_from_directory(test_dir,\n",
        "                                                                image_size=IMAGE_SHAPE,\n",
        "                                                                label_mode='categorical')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "metadata": {
        "id": "o9O_3Ld0eQDq"
      },
      "outputs": [],
      "source": [
        "# create data-augmentation layer for 10% data\n",
        "data_augmentation = Sequential([\n",
        "    preprocessing.RandomFlip('horizontal'),\n",
        "    preprocessing.RandomHeight(0.2),\n",
        "    preprocessing.RandomWidth(0.2),\n",
        "    preprocessing.RandomRotation(0.2),\n",
        "    preprocessing.RandomZoom(0.2)\n",
        "],name='data-augmentation')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 84,
      "metadata": {
        "id": "DwyH5jsWeyaM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ce887b7f-4d45-42a6-daed-8d1c1bd25763"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "24/24 [==============================] - 14s 334ms/step - loss: 2.1081 - accuracy: 0.2547 - val_loss: 1.6026 - val_accuracy: 0.5444\n",
            "Epoch 2/5\n",
            "24/24 [==============================] - 6s 237ms/step - loss: 1.4386 - accuracy: 0.6293 - val_loss: 1.1393 - val_accuracy: 0.7122\n",
            "Epoch 3/5\n",
            "24/24 [==============================] - 7s 263ms/step - loss: 1.1100 - accuracy: 0.7267 - val_loss: 0.9518 - val_accuracy: 0.7303\n",
            "Epoch 4/5\n",
            "24/24 [==============================] - 7s 250ms/step - loss: 0.9407 - accuracy: 0.7773 - val_loss: 0.8437 - val_accuracy: 0.7697\n",
            "Epoch 5/5\n",
            "24/24 [==============================] - 7s 249ms/step - loss: 0.8295 - accuracy: 0.7787 - val_loss: 0.7606 - val_accuracy: 0.7829\n"
          ]
        }
      ],
      "source": [
        "# let's build the model\n",
        "\n",
        "# set the random-seed\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# set the base model\n",
        "base_model = tf.keras.applications.EfficientNetB0(include_top=False) #because we'll make our own output layers\n",
        "# set the trainable false\n",
        "base_model.trainable = False\n",
        "\n",
        "# input layer\n",
        "inputs = tf.keras.layers.Input(shape=(224,224,3),name='input_layer')\n",
        "\n",
        "x = data_augmentation(inputs)\n",
        "x = base_model(x,training=False)\n",
        "x = tf.keras.layers.GlobalAveragePooling2D(name='global_average_pooling_layer')(x)\n",
        "\n",
        "# output layer\n",
        "output = tf.keras.layers.Dense(10,activation='softmax',name='output')(x)\n",
        "\n",
        "# making model\n",
        "model_2 = tf.keras.Model(inputs,output)\n",
        "\n",
        "# compile the model\n",
        "model_2.compile(loss='categorical_crossentropy',\n",
        "                optimizer=tf.keras.optimizers.Adam(),\n",
        "                metrics=['accuracy'])\n",
        "\n",
        "# fitting the model\n",
        "history_2 = model_2.fit(train_data_10_percent,\n",
        "                        epochs=5,\n",
        "                        steps_per_epoch= len(train_data_10_percent),\n",
        "                        validation_data = test_data,\n",
        "                        validation_steps = int(0.25 * len(test_data)),)\n",
        "                        #callbacks = [create_tensorboard_callback('transfer_learning',\"10_percent_data_aug\")])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Creating ModelCheckPoint:\n",
        "\n",
        "For this model we're going to cover another callback name \"ModelCheckPoint\" which gives us the ability to save our model as a whole or it's weights to specific directory as it trains.\n",
        "\n",
        "This comes very helpful if we're thinking about making backup of the model as it trains. We could reload the model at that point and use it. For instance we train our model for 5 epochs and we see that it still improving then we can re-load the model and unfreeze some of it's layers and do the fine-tunning."
      ],
      "metadata": {
        "id": "XKeIY-DrV5py"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 85,
      "metadata": {
        "id": "17bCf-ZcgqD7"
      },
      "outputs": [],
      "source": [
        "# setup the checkpoint path\n",
        "checkpoint_path = \"10_percent_model_checkpoints_weights/checkpoint.ckpt\"\n",
        "\n",
        "# create a checkpoint that save only model's weights...\n",
        "checkpoint_model = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path,save_weights_only=True,\n",
        "                                                      save_best_only=False,\n",
        "                                                      save_freq='epoch',\n",
        "                                                      verbose=1)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# let's fit the model and save the weights...\n",
        "initial_epochs = 5\n",
        "history_10_percent_data_aug = model_2.fit(train_data_10_percent,\n",
        "                                          epochs=initial_epochs,\n",
        "                                          validation_data = test_data,\n",
        "                                          validation_steps = int(0.25 * len(test_data)),\n",
        "                                          callbacks = [create_tensorboard_callback('transfer_learning','10_percent_data_aug'),\n",
        "                                                       checkpoint_model])"
      ],
      "metadata": {
        "id": "h7LInMvbXVRs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6d89096b-2009-40e8-fe38-93c8d9a5ac53"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving TensorBoard Files to : transfer_learning/10_percent_data_aug/20220806-205633\n",
            "Epoch 1/5\n",
            "24/24 [==============================] - ETA: 0s - loss: 0.7483 - accuracy: 0.8120\n",
            "Epoch 1: saving model to 10_percent_model_checkpoints_weights/checkpoint.ckpt\n",
            "24/24 [==============================] - 7s 291ms/step - loss: 0.7483 - accuracy: 0.8120 - val_loss: 0.7019 - val_accuracy: 0.7961\n",
            "Epoch 2/5\n",
            "24/24 [==============================] - ETA: 0s - loss: 0.6730 - accuracy: 0.8147\n",
            "Epoch 2: saving model to 10_percent_model_checkpoints_weights/checkpoint.ckpt\n",
            "24/24 [==============================] - 7s 264ms/step - loss: 0.6730 - accuracy: 0.8147 - val_loss: 0.6833 - val_accuracy: 0.7895\n",
            "Epoch 3/5\n",
            "24/24 [==============================] - ETA: 0s - loss: 0.6295 - accuracy: 0.8400\n",
            "Epoch 3: saving model to 10_percent_model_checkpoints_weights/checkpoint.ckpt\n",
            "24/24 [==============================] - 8s 318ms/step - loss: 0.6295 - accuracy: 0.8400 - val_loss: 0.6574 - val_accuracy: 0.7977\n",
            "Epoch 4/5\n",
            "24/24 [==============================] - ETA: 0s - loss: 0.5825 - accuracy: 0.8413\n",
            "Epoch 4: saving model to 10_percent_model_checkpoints_weights/checkpoint.ckpt\n",
            "24/24 [==============================] - 7s 259ms/step - loss: 0.5825 - accuracy: 0.8413 - val_loss: 0.6315 - val_accuracy: 0.8026\n",
            "Epoch 5/5\n",
            "24/24 [==============================] - ETA: 0s - loss: 0.5774 - accuracy: 0.8627\n",
            "Epoch 5: saving model to 10_percent_model_checkpoints_weights/checkpoint.ckpt\n",
            "24/24 [==============================] - 7s 297ms/step - loss: 0.5774 - accuracy: 0.8627 - val_loss: 0.6510 - val_accuracy: 0.7796\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# let's plot the model performance\n",
        "plot_loss_curves(history_10_percent_data_aug)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "37BIq3LrrS1C",
        "outputId": "2d776eab-e0e1-46b3-c7d9-6532d13fd313"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# evaluate on test data\n",
        "results_10_percent_data_aug = model_2.evaluate(test_data)\n",
        "results_10_percent_data_aug"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-K-nKwL6r6Fq",
        "outputId": "d07d803f-bd26-48ac-a894-db6a2cbd06e6"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "79/79 [==============================] - 6s 72ms/step - loss: 0.5715 - accuracy: 0.8356\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.5715073943138123, 0.8356000185012817]"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# as we saved our model weights, let's reload them and check whether they saved correctly or not\n",
        "model_2.load_weights(checkpoint_path)\n",
        "loaded_model_result = model_2.evaluate(test_data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t9Pb72p3sTdJ",
        "outputId": "733f38e2-8928-4d02-af5e-e1d15bcd0909"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "79/79 [==============================] - 7s 78ms/step - loss: 0.5715 - accuracy: 0.8356\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# compare the original and loaded model results\n",
        "results_10_percent_data_aug == loaded_model_result"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Gu6GjAmtATJ",
        "outputId": "3126e934-23c7-43bb-c7d6-28a043ec7a67"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Although above cell output `False` this is because the computer number stores with degree of precision.but the result are almost very close."
      ],
      "metadata": {
        "id": "WrlM1HUwtMvc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# we can varify the closeness through numpy...\n",
        "np.isclose(np.array(results_10_percent_data_aug),np.array(loaded_model_result))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4bS8uGcFtIgA",
        "outputId": "f0c0063a-7800-43cb-d99c-b73dc4b03cba"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ True,  True])"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model 3 : Fine Tunning on 10% data model\n",
        "\n",
        "So far our saved model has been trained on 5 epochs with 10 percent of training data and augmentation data.\n",
        "\n",
        "For this experiment, we're going to use fine-tunning feature extraction that means we'll be unfreeze some of the layers during training."
      ],
      "metadata": {
        "id": "eConshgvt6x1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# first check which layer is trainable or not in the base model\n",
        "for layer_number,layer in enumerate(base_model.layers):\n",
        "  print(layer_number,layer,layer.trainable)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jYst1Od2tptS",
        "outputId": "4a701bc0-f762-485d-e4df-7e7ca93162f8"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 <keras.engine.input_layer.InputLayer object at 0x7f213be60610> False\n",
            "1 <keras.layers.preprocessing.image_preprocessing.Rescaling object at 0x7f213be60990> False\n",
            "2 <keras.layers.preprocessing.normalization.Normalization object at 0x7f213be5fd10> False\n",
            "3 <keras.layers.convolutional.ZeroPadding2D object at 0x7f213be5ff50> False\n",
            "4 <keras.layers.convolutional.Conv2D object at 0x7f213be68410> False\n",
            "5 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213906b4d0> False\n",
            "6 <keras.layers.core.activation.Activation object at 0x7f213be4d710> False\n",
            "7 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f213be420d0> False\n",
            "8 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213beb7250> False\n",
            "9 <keras.layers.core.activation.Activation object at 0x7f213be547d0> False\n",
            "10 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f213beb7110> False\n",
            "11 <keras.layers.core.reshape.Reshape object at 0x7f213bebb790> False\n",
            "12 <keras.layers.convolutional.Conv2D object at 0x7f213beb3490> False\n",
            "13 <keras.layers.convolutional.Conv2D object at 0x7f213be54f50> False\n",
            "14 <keras.layers.merge.Multiply object at 0x7f213be95310> False\n",
            "15 <keras.layers.convolutional.Conv2D object at 0x7f213bea1690> False\n",
            "16 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213bea1550> False\n",
            "17 <keras.layers.convolutional.Conv2D object at 0x7f213be878d0> False\n",
            "18 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213be908d0> False\n",
            "19 <keras.layers.core.activation.Activation object at 0x7f213beffdd0> False\n",
            "20 <keras.layers.convolutional.ZeroPadding2D object at 0x7f213beec690> False\n",
            "21 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f213bee7890> False\n",
            "22 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f23e4fb4850> False\n",
            "23 <keras.layers.core.activation.Activation object at 0x7f21359e6910> False\n",
            "24 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f213bee05d0> False\n",
            "25 <keras.layers.core.reshape.Reshape object at 0x7f214919a7d0> False\n",
            "26 <keras.layers.convolutional.Conv2D object at 0x7f213beff650> False\n",
            "27 <keras.layers.convolutional.Conv2D object at 0x7f213befd4d0> False\n",
            "28 <keras.layers.merge.Multiply object at 0x7f213becf690> False\n",
            "29 <keras.layers.convolutional.Conv2D object at 0x7f213bec5650> False\n",
            "30 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213be95750> False\n",
            "31 <keras.layers.convolutional.Conv2D object at 0x7f213bf30fd0> False\n",
            "32 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213bf21f50> False\n",
            "33 <keras.layers.core.activation.Activation object at 0x7f213bdee810> False\n",
            "34 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f213bf25b10> False\n",
            "35 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213bf21c50> False\n",
            "36 <keras.layers.core.activation.Activation object at 0x7f213bee0d10> False\n",
            "37 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f213be89610> False\n",
            "38 <keras.layers.core.reshape.Reshape object at 0x7f213becf750> False\n",
            "39 <keras.layers.convolutional.Conv2D object at 0x7f213beb3fd0> False\n",
            "40 <keras.layers.convolutional.Conv2D object at 0x7f213bf299d0> False\n",
            "41 <keras.layers.merge.Multiply object at 0x7f213be58710> False\n",
            "42 <keras.layers.convolutional.Conv2D object at 0x7f213bf12790> False\n",
            "43 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213bf1e4d0> False\n",
            "44 <keras.layers.core.dropout.Dropout object at 0x7f213bf06550> False\n",
            "45 <keras.layers.merge.Add object at 0x7f21390dee90> False\n",
            "46 <keras.layers.convolutional.Conv2D object at 0x7f213bf75e10> False\n",
            "47 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213bf1e690> False\n",
            "48 <keras.layers.core.activation.Activation object at 0x7f213bf0de50> False\n",
            "49 <keras.layers.convolutional.ZeroPadding2D object at 0x7f213bf0d6d0> False\n",
            "50 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f213befd450> False\n",
            "51 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213bf59d90> False\n",
            "52 <keras.layers.core.activation.Activation object at 0x7f213bf29650> False\n",
            "53 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f213bf474d0> False\n",
            "54 <keras.layers.core.reshape.Reshape object at 0x7f213bf47910> False\n",
            "55 <keras.layers.convolutional.Conv2D object at 0x7f213bf47d50> False\n",
            "56 <keras.layers.convolutional.Conv2D object at 0x7f213bf0ba10> False\n",
            "57 <keras.layers.merge.Multiply object at 0x7f213bfbd710> False\n",
            "58 <keras.layers.convolutional.Conv2D object at 0x7f213bfac7d0> False\n",
            "59 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213bfb3710> False\n",
            "60 <keras.layers.convolutional.Conv2D object at 0x7f213bf8f6d0> False\n",
            "61 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213bf96790> False\n",
            "62 <keras.layers.core.activation.Activation object at 0x7f213bf8c690> False\n",
            "63 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f213bf83a90> False\n",
            "64 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213bff0c10> False\n",
            "65 <keras.layers.core.activation.Activation object at 0x7f213bffde10> False\n",
            "66 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f213bfe7b10> False\n",
            "67 <keras.layers.core.reshape.Reshape object at 0x7f213bfec090> False\n",
            "68 <keras.layers.convolutional.Conv2D object at 0x7f213bfe7b90> False\n",
            "69 <keras.layers.convolutional.Conv2D object at 0x7f213bf9ed90> False\n",
            "70 <keras.layers.merge.Multiply object at 0x7f213bfcd090> False\n",
            "71 <keras.layers.convolutional.Conv2D object at 0x7f213bfd6dd0> False\n",
            "72 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213bfdbc90> False\n",
            "73 <keras.layers.core.dropout.Dropout object at 0x7f213bfc0dd0> False\n",
            "74 <keras.layers.merge.Add object at 0x7f21359db990> False\n",
            "75 <keras.layers.convolutional.Conv2D object at 0x7f213bfe7810> False\n",
            "76 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213bf94310> False\n",
            "77 <keras.layers.core.activation.Activation object at 0x7f213bfbd4d0> False\n",
            "78 <keras.layers.convolutional.ZeroPadding2D object at 0x7f213bf4ccd0> False\n",
            "79 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f213bfecc10> False\n",
            "80 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213be89a90> False\n",
            "81 <keras.layers.core.activation.Activation object at 0x7f213bf754d0> False\n",
            "82 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f213bf1ee50> False\n",
            "83 <keras.layers.core.reshape.Reshape object at 0x7f213bf4c390> False\n",
            "84 <keras.layers.convolutional.Conv2D object at 0x7f213e01e590> False\n",
            "85 <keras.layers.convolutional.Conv2D object at 0x7f213bfecf50> False\n",
            "86 <keras.layers.merge.Multiply object at 0x7f213f0855d0> False\n",
            "87 <keras.layers.convolutional.Conv2D object at 0x7f213e013490> False\n",
            "88 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213e026dd0> False\n",
            "89 <keras.layers.convolutional.Conv2D object at 0x7f21450baf10> False\n",
            "90 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213f083810> False\n",
            "91 <keras.layers.core.activation.Activation object at 0x7f213f07fb90> False\n",
            "92 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f2146e41d50> False\n",
            "93 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146e41b50> False\n",
            "94 <keras.layers.core.activation.Activation object at 0x7f2146e41e50> False\n",
            "95 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f2146e41b10> False\n",
            "96 <keras.layers.core.reshape.Reshape object at 0x7f2146eb3990> False\n",
            "97 <keras.layers.convolutional.Conv2D object at 0x7f2146eac090> False\n",
            "98 <keras.layers.convolutional.Conv2D object at 0x7f23db9f75d0> False\n",
            "99 <keras.layers.merge.Multiply object at 0x7f2146ea3110> False\n",
            "100 <keras.layers.convolutional.Conv2D object at 0x7f2146eac7d0> False\n",
            "101 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146e3aed0> False\n",
            "102 <keras.layers.core.dropout.Dropout object at 0x7f2146e85410> False\n",
            "103 <keras.layers.merge.Add object at 0x7f213bfc0e90> False\n",
            "104 <keras.layers.convolutional.Conv2D object at 0x7f2146ea94d0> False\n",
            "105 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146e3c310> False\n",
            "106 <keras.layers.core.activation.Activation object at 0x7f2146ef8090> False\n",
            "107 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f2146ef8c50> False\n",
            "108 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146e886d0> False\n",
            "109 <keras.layers.core.activation.Activation object at 0x7f2146ef6610> False\n",
            "110 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f2146eec810> False\n",
            "111 <keras.layers.core.reshape.Reshape object at 0x7f2146ee0750> False\n",
            "112 <keras.layers.convolutional.Conv2D object at 0x7f2146ee01d0> False\n",
            "113 <keras.layers.convolutional.Conv2D object at 0x7f2146ec8f90> False\n",
            "114 <keras.layers.merge.Multiply object at 0x7f2146ecd490> False\n",
            "115 <keras.layers.convolutional.Conv2D object at 0x7f2146ec8310> False\n",
            "116 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146ecdb50> False\n",
            "117 <keras.layers.core.dropout.Dropout object at 0x7f2146e3a790> False\n",
            "118 <keras.layers.merge.Add object at 0x7f2146ef0750> False\n",
            "119 <keras.layers.convolutional.Conv2D object at 0x7f2146ef0b90> False\n",
            "120 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146ed9190> False\n",
            "121 <keras.layers.core.activation.Activation object at 0x7f213bf06790> False\n",
            "122 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f213f083f10> False\n",
            "123 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146ec1450> False\n",
            "124 <keras.layers.core.activation.Activation object at 0x7f213e0263d0> False\n",
            "125 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f2146ec1110> False\n",
            "126 <keras.layers.core.reshape.Reshape object at 0x7f213e026b50> False\n",
            "127 <keras.layers.convolutional.Conv2D object at 0x7f2146ee0a50> False\n",
            "128 <keras.layers.convolutional.Conv2D object at 0x7f2146ed9d10> False\n",
            "129 <keras.layers.merge.Multiply object at 0x7f2146f1e850> False\n",
            "130 <keras.layers.convolutional.Conv2D object at 0x7f2146f33a10> False\n",
            "131 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146f28910> False\n",
            "132 <keras.layers.convolutional.Conv2D object at 0x7f2146f11250> False\n",
            "133 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146f197d0> False\n",
            "134 <keras.layers.core.activation.Activation object at 0x7f2146efd290> False\n",
            "135 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f2146efd6d0> False\n",
            "136 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f213bf47a50> False\n",
            "137 <keras.layers.core.activation.Activation object at 0x7f2146f11b50> False\n",
            "138 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f2146f65790> False\n",
            "139 <keras.layers.core.reshape.Reshape object at 0x7f2146f0e390> False\n",
            "140 <keras.layers.convolutional.Conv2D object at 0x7f213e026210> False\n",
            "141 <keras.layers.convolutional.Conv2D object at 0x7f2146f0a290> False\n",
            "142 <keras.layers.merge.Multiply object at 0x7f2146f54dd0> False\n",
            "143 <keras.layers.convolutional.Conv2D object at 0x7f2146f54550> False\n",
            "144 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146f56090> False\n",
            "145 <keras.layers.core.dropout.Dropout object at 0x7f2146f3b2d0> False\n",
            "146 <keras.layers.merge.Add object at 0x7f2146e3a750> False\n",
            "147 <keras.layers.convolutional.Conv2D object at 0x7f2146faf9d0> False\n",
            "148 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146fafa10> False\n",
            "149 <keras.layers.core.activation.Activation object at 0x7f2146fb7490> False\n",
            "150 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f2146fafb90> False\n",
            "151 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146f9aed0> False\n",
            "152 <keras.layers.core.activation.Activation object at 0x7f2146f9ad10> False\n",
            "153 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f2146f84b50> False\n",
            "154 <keras.layers.core.reshape.Reshape object at 0x7f2146f845d0> False\n",
            "155 <keras.layers.convolutional.Conv2D object at 0x7f2146f84d10> False\n",
            "156 <keras.layers.convolutional.Conv2D object at 0x7f2146fb2f10> False\n",
            "157 <keras.layers.merge.Multiply object at 0x7f2146f65590> False\n",
            "158 <keras.layers.convolutional.Conv2D object at 0x7f2146efd9d0> False\n",
            "159 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146f93f50> False\n",
            "160 <keras.layers.core.dropout.Dropout object at 0x7f2146f2e390> False\n",
            "161 <keras.layers.merge.Add object at 0x7f2146ebc550> False\n",
            "162 <keras.layers.convolutional.Conv2D object at 0x7f2146ec1150> False\n",
            "163 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146efb650> False\n",
            "164 <keras.layers.core.activation.Activation object at 0x7f2146ff5c10> False\n",
            "165 <keras.layers.convolutional.ZeroPadding2D object at 0x7f2146ff99d0> False\n",
            "166 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f2146ff5f90> False\n",
            "167 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146ef6d90> False\n",
            "168 <keras.layers.core.activation.Activation object at 0x7f2146f9a150> False\n",
            "169 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f2146fe8a50> False\n",
            "170 <keras.layers.core.reshape.Reshape object at 0x7f2146fe5b10> False\n",
            "171 <keras.layers.convolutional.Conv2D object at 0x7f2146f93750> False\n",
            "172 <keras.layers.convolutional.Conv2D object at 0x7f2146f199d0> False\n",
            "173 <keras.layers.merge.Multiply object at 0x7f2146fd19d0> False\n",
            "174 <keras.layers.convolutional.Conv2D object at 0x7f2146fd4150> False\n",
            "175 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146fd1a50> False\n",
            "176 <keras.layers.convolutional.Conv2D object at 0x7f2146fc1ed0> False\n",
            "177 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2147022a10> False\n",
            "178 <keras.layers.core.activation.Activation object at 0x7f2147031610> False\n",
            "179 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f2147027310> False\n",
            "180 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146fe5a90> False\n",
            "181 <keras.layers.core.activation.Activation object at 0x7f2146fee5d0> False\n",
            "182 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f2147013490> False\n",
            "183 <keras.layers.core.reshape.Reshape object at 0x7f214702c550> False\n",
            "184 <keras.layers.convolutional.Conv2D object at 0x7f2146fc9f50> False\n",
            "185 <keras.layers.convolutional.Conv2D object at 0x7f214702c750> False\n",
            "186 <keras.layers.merge.Multiply object at 0x7f23e53d1250> False\n",
            "187 <keras.layers.convolutional.Conv2D object at 0x7f23e53dafd0> False\n",
            "188 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f23e53d1f50> False\n",
            "189 <keras.layers.core.dropout.Dropout object at 0x7f23e53c2490> False\n",
            "190 <keras.layers.merge.Add object at 0x7f2146ebc4d0> False\n",
            "191 <keras.layers.convolutional.Conv2D object at 0x7f214be40b10> False\n",
            "192 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f23e53d3990> False\n",
            "193 <keras.layers.core.activation.Activation object at 0x7f214be2bf90> False\n",
            "194 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f2149bde650> False\n",
            "195 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2149bc9c90> False\n",
            "196 <keras.layers.core.activation.Activation object at 0x7f2149bc9550> False\n",
            "197 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f214701cc50> False\n",
            "198 <keras.layers.core.reshape.Reshape object at 0x7f21470275d0> False\n",
            "199 <keras.layers.convolutional.Conv2D object at 0x7f23e53eb350> False\n",
            "200 <keras.layers.convolutional.Conv2D object at 0x7f214be40ed0> False\n",
            "201 <keras.layers.merge.Multiply object at 0x7f23e53c2e50> False\n",
            "202 <keras.layers.convolutional.Conv2D object at 0x7f2146fd1050> False\n",
            "203 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f23e53d1610> False\n",
            "204 <keras.layers.core.dropout.Dropout object at 0x7f213e013bd0> False\n",
            "205 <keras.layers.merge.Add object at 0x7f214be0b210> False\n",
            "206 <keras.layers.convolutional.Conv2D object at 0x7f2146fb2d10> False\n",
            "207 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2146ff9950> False\n",
            "208 <keras.layers.core.activation.Activation object at 0x7f2149bdd950> False\n",
            "209 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f2149be7a90> False\n",
            "210 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f23e53d3d50> False\n",
            "211 <keras.layers.core.activation.Activation object at 0x7f2149bd2dd0> False\n",
            "212 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f23d8df5b90> False\n",
            "213 <keras.layers.core.reshape.Reshape object at 0x7f23d8dfad90> False\n",
            "214 <keras.layers.convolutional.Conv2D object at 0x7f23e53c2b90> False\n",
            "215 <keras.layers.convolutional.Conv2D object at 0x7f2149be9f50> False\n",
            "216 <keras.layers.merge.Multiply object at 0x7f23d8e09b50> False\n",
            "217 <keras.layers.convolutional.Conv2D object at 0x7f23d8dff5d0> False\n",
            "218 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f23d8e09990> False\n",
            "219 <keras.layers.core.dropout.Dropout object at 0x7f23d8e00d10> False\n",
            "220 <keras.layers.merge.Add object at 0x7f2146faaf10> False\n",
            "221 <keras.layers.convolutional.Conv2D object at 0x7f23d8df6990> False\n",
            "222 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2149be9550> False\n",
            "223 <keras.layers.core.activation.Activation object at 0x7f214be8c090> False\n",
            "224 <keras.layers.convolutional.DepthwiseConv2D object at 0x7f214be8e890> False\n",
            "225 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f23e5393a50> False\n",
            "226 <keras.layers.core.activation.Activation object at 0x7f214beaa410> False\n",
            "227 <keras.layers.pooling.GlobalAveragePooling2D object at 0x7f23e5393c10> False\n",
            "228 <keras.layers.core.reshape.Reshape object at 0x7f214be8aa10> False\n",
            "229 <keras.layers.convolutional.Conv2D object at 0x7f23d8dfa3d0> False\n",
            "230 <keras.layers.convolutional.Conv2D object at 0x7f214beaae10> False\n",
            "231 <keras.layers.merge.Multiply object at 0x7f23e537f050> False\n",
            "232 <keras.layers.convolutional.Conv2D object at 0x7f23e5378a90> False\n",
            "233 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f23e537f090> False\n",
            "234 <keras.layers.convolutional.Conv2D object at 0x7f213be48b10> False\n",
            "235 <keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2149bd8f50> False\n",
            "236 <keras.layers.core.activation.Activation object at 0x7f2149c2ef50> False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "wow! that is what we exactly wanted.\n",
        "\n",
        "Now to fine tune our model, we'll unfreeze 10 more layers and update it's weights during, remaining layers will be froze.\n",
        "\n",
        "First, we'll unfreeze all the layers then loop through all the layers and set the last 10 layers to not trainable"
      ],
      "metadata": {
        "id": "okOtJqUdvyoh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "base_model.trainable = True\n",
        "\n",
        "for layer in base_model.layers[:-10]:\n",
        "  layer.trainable = False\n",
        "\n",
        "# let's verify this \n",
        "for layer in base_model.layers[-20:]:\n",
        "  print(layer,layer.trainable)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OkCSpoaLvojv",
        "outputId": "ea035570-78e7-4875-f3bf-917d3d886ce2"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<keras.layers.convolutional.Conv2D object at 0x7f23d8dff5d0> False\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f23d8e09990> False\n",
            "<keras.layers.core.dropout.Dropout object at 0x7f23d8e00d10> False\n",
            "<keras.layers.merge.Add object at 0x7f2146faaf10> False\n",
            "<keras.layers.convolutional.Conv2D object at 0x7f23d8df6990> False\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2149be9550> False\n",
            "<keras.layers.core.activation.Activation object at 0x7f214be8c090> False\n",
            "<keras.layers.convolutional.DepthwiseConv2D object at 0x7f214be8e890> False\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f23e5393a50> False\n",
            "<keras.layers.core.activation.Activation object at 0x7f214beaa410> False\n",
            "<keras.layers.pooling.GlobalAveragePooling2D object at 0x7f23e5393c10> True\n",
            "<keras.layers.core.reshape.Reshape object at 0x7f214be8aa10> True\n",
            "<keras.layers.convolutional.Conv2D object at 0x7f23d8dfa3d0> True\n",
            "<keras.layers.convolutional.Conv2D object at 0x7f214beaae10> True\n",
            "<keras.layers.merge.Multiply object at 0x7f23e537f050> True\n",
            "<keras.layers.convolutional.Conv2D object at 0x7f23e5378a90> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f23e537f090> True\n",
            "<keras.layers.convolutional.Conv2D object at 0x7f213be48b10> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f2149bd8f50> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f2149c2ef50> True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# recompile the model\n",
        "model_2.compile(loss='categorical_crossentropy',\n",
        "                optimizer = tf.keras.optimizers.Adam(lr=0.0001),\n",
        "                metrics = ['accuracy'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ifFTV1OwxCN-",
        "outputId": "0e40645c-eac9-4b4d-bf6f-f8903443a903"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super(Adam, self).__init__(name, **kwargs)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# we're going to fit the model 2 to where our model finished. since it trained for 5 epochs, our fine-tunning will begin on 5 and continue to 10 epoch\n",
        "fine_tune_epochs = initial_epochs + 5\n",
        "history_fine_10_percent_data_aug = model_2.fit(train_data,\n",
        "                                               epochs=fine_tune_epochs,\n",
        "                                               validation_data = test_data,\n",
        "                                               initial_epoch = history_10_percent_data_aug.epoch[-1],\n",
        "                                               validation_steps= int(0.25 * len(test_data)),\n",
        "                                               callbacks = [create_tensorboard_callback('transfer_learning','fine_tune_10_percent_data')]\n",
        "                                               )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2vJjl6ZdxojC",
        "outputId": "62233090-2f16-4648-fde8-0856b7fdfd58"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving TensorBoard Files to : transfer_learning/fine_tune_10_percent_data/20220806-205736\n",
            "Epoch 5/10\n",
            "24/24 [==============================] - 14s 352ms/step - loss: 2.3499 - accuracy: 0.0800 - val_loss: 0.5868 - val_accuracy: 0.8092\n",
            "Epoch 6/10\n",
            "24/24 [==============================] - 7s 307ms/step - loss: 2.3293 - accuracy: 0.0893 - val_loss: 0.6261 - val_accuracy: 0.7878\n",
            "Epoch 7/10\n",
            "24/24 [==============================] - 8s 328ms/step - loss: 2.3213 - accuracy: 0.0920 - val_loss: 0.6335 - val_accuracy: 0.8026\n",
            "Epoch 8/10\n",
            "24/24 [==============================] - 7s 306ms/step - loss: 2.3067 - accuracy: 0.1120 - val_loss: 0.6089 - val_accuracy: 0.8043\n",
            "Epoch 9/10\n",
            "24/24 [==============================] - 7s 293ms/step - loss: 2.3100 - accuracy: 0.1080 - val_loss: 0.5990 - val_accuracy: 0.8141\n",
            "Epoch 10/10\n",
            "24/24 [==============================] - 8s 324ms/step - loss: 2.3180 - accuracy: 0.0973 - val_loss: 0.6270 - val_accuracy: 0.8010\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# let's compare the performance of the model before and after the tunning.\n",
        "# make a function for comparison\n",
        "\n",
        "def compare_history(original_history,new_history,initial_epochs=5):\n",
        "  # get the original history\n",
        "\n",
        "  acc = original_history.history['accuracy']\n",
        "  val_acc = original_history.history['val_accuracy']\n",
        "\n",
        "  loss = original_history.history['loss']\n",
        "  val_loss = original_history.history['val_loss']\n",
        "\n",
        "  # combine the original history with new_history...\n",
        "  total_acc = acc + new_history.history['accuracy']\n",
        "  total_val_acc = val_acc + new_history.history['val_accuracy']\n",
        "\n",
        "  total_loss = loss + new_history.history['loss']\n",
        "  total_val_loss = val_loss + new_history.history['val_loss']\n",
        "\n",
        "  # let's plot plots\n",
        "  plt.figure(figsize=(8,8))\n",
        "  plt.subplot(2,1,1)\n",
        "  plt.plot(total_acc,label=\"Training Accuracy\")\n",
        "  plt.plot(total_val_acc,label='Training validation Accuracy')\n",
        "  plt.plot([initial_epochs-1,initial_epochs-1],\n",
        "           plt.ylim(),label=\"Start Fine Tunning\")\n",
        "  plt.legend(loc='lower right')\n",
        "  plt.title(\"Training and Validation Accuracy\")\n",
        "\n",
        "  # let's plot the loss\n",
        "  plt.subplot(2,1,2)\n",
        "  plt.plot(total_loss,label=\"Training Loss\")\n",
        "  plt.plot(total_val_loss,label=\"Validation Loss\")\n",
        "  plt.plot([initial_epochs-1,initial_epochs-1],\n",
        "           plt.ylim(),label=\"Start Fine Tunning\")\n",
        "  plt.legend(loc='upper right')\n",
        "  plt.title(\"Traing and Validation Loss\")\n",
        "  plt.xlabel('epochs')\n",
        "  plt.show()"
      ],
      "metadata": {
        "id": "QdoPYFySyo-4"
      },
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# let's plot the comparison\n",
        "compare_history(history_10_percent_data_aug,history_fine_10_percent_data_aug)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "qzaO0SPX69KG",
        "outputId": "7fb5ef2d-4884-4d91-f440-5dc1021cdf50"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x576 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model 4. : Fine Tune existing model on all data"
      ],
      "metadata": {
        "id": "O8DBSmg09PSo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# download all the data and unzip it...\n",
        "!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_all_data.zip "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4MU71myw7r5Q",
        "outputId": "4a585e49-cb9c-42ab-ecc0-7a6a0c0b9231"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2022-08-06 21:01:36--  https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_all_data.zip\n",
            "Resolving storage.googleapis.com (storage.googleapis.com)... 172.253.62.128, 172.253.115.128, 172.253.122.128, ...\n",
            "Connecting to storage.googleapis.com (storage.googleapis.com)|172.253.62.128|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 519183241 (495M) [application/zip]\n",
            "Saving to: ‘10_food_classes_all_data.zip’\n",
            "\n",
            "10_food_classes_all 100%[===================>] 495.13M  71.6MB/s    in 4.9s    \n",
            "\n",
            "2022-08-06 21:01:41 (100 MB/s) - ‘10_food_classes_all_data.zip’ saved [519183241/519183241]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# unzip the all data....\n",
        "import zipfile\n",
        "zipfile = zipfile.ZipFile(\"/content/10_food_classes_all_data.zip\")\n",
        "zipfile.extractall()\n",
        "zipfile.close()"
      ],
      "metadata": {
        "id": "p_aAO-au9p6i"
      },
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# walk through the directories....\n",
        "for dir_path,dirnames,filenames in os.walk(\"/content/10_food_classes_all_data\"):\n",
        "  print(f\"There are {len(dirnames)} directories and {len(filenames)} images in {dir_path}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W_vebocm91s3",
        "outputId": "bdcd74fc-b925-4d96-ae8a-08dede0618a2"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 2 directories and 0 images in /content/10_food_classes_all_data\n",
            "There are 10 directories and 0 images in /content/10_food_classes_all_data/train\n",
            "There are 0 directories and 750 images in /content/10_food_classes_all_data/train/pizza\n",
            "There are 0 directories and 750 images in /content/10_food_classes_all_data/train/grilled_salmon\n",
            "There are 0 directories and 750 images in /content/10_food_classes_all_data/train/hamburger\n",
            "There are 0 directories and 750 images in /content/10_food_classes_all_data/train/steak\n",
            "There are 0 directories and 750 images in /content/10_food_classes_all_data/train/chicken_curry\n",
            "There are 0 directories and 750 images in /content/10_food_classes_all_data/train/ramen\n",
            "There are 0 directories and 750 images in /content/10_food_classes_all_data/train/sushi\n",
            "There are 0 directories and 750 images in /content/10_food_classes_all_data/train/fried_rice\n",
            "There are 0 directories and 750 images in /content/10_food_classes_all_data/train/chicken_wings\n",
            "There are 0 directories and 750 images in /content/10_food_classes_all_data/train/ice_cream\n",
            "There are 10 directories and 0 images in /content/10_food_classes_all_data/test\n",
            "There are 0 directories and 250 images in /content/10_food_classes_all_data/test/pizza\n",
            "There are 0 directories and 250 images in /content/10_food_classes_all_data/test/grilled_salmon\n",
            "There are 0 directories and 250 images in /content/10_food_classes_all_data/test/hamburger\n",
            "There are 0 directories and 250 images in /content/10_food_classes_all_data/test/steak\n",
            "There are 0 directories and 250 images in /content/10_food_classes_all_data/test/chicken_curry\n",
            "There are 0 directories and 250 images in /content/10_food_classes_all_data/test/ramen\n",
            "There are 0 directories and 250 images in /content/10_food_classes_all_data/test/sushi\n",
            "There are 0 directories and 250 images in /content/10_food_classes_all_data/test/fried_rice\n",
            "There are 0 directories and 250 images in /content/10_food_classes_all_data/test/chicken_wings\n",
            "There are 0 directories and 250 images in /content/10_food_classes_all_data/test/ice_cream\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# setup the directories....\n",
        "train_data = \"/content/10_food_classes_all_data/train/\"\n",
        "test_data = \"/content/10_food_classes_all_data/test/\"\n",
        "\n",
        "# turn images into tensor-dataset\n",
        "train_data_10_classes_full = tf.keras.preprocessing.image_dataset_from_directory(train_data,\n",
        "                                                                                 label_mode='categorical',\n",
        "                                                                                 image_size=(224,224))\n",
        "\n",
        "test_data_10_classes_full = tf.keras.preprocessing.image_dataset_from_directory(test_data,\n",
        "                                                                                 label_mode='categorical',\n",
        "                                                                                 image_size=(224,224))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iPnl_bob--_l",
        "outputId": "9e763cd5-dce7-450e-aaf6-9de50189135c"
      },
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 7500 files belonging to 10 classes.\n",
            "Found 2500 files belonging to 10 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The test-dataset is same that we used for previous experiment.\n",
        "\n",
        "To begin with all of the data, we need to revert back it to the weights that we checkpoint at epoch 5."
      ],
      "metadata": {
        "id": "0Rm1xnuqAexf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# load weights from checkpoint\n",
        "model_2.load_weights(checkpoint_path)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MrKslbcc_663",
        "outputId": "36f50b27-1416-4212-cf43-39f4db7e4f40"
      },
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.training.tracking.util.CheckpointLoadStatus at 0x7f214f952d10>"
            ]
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# compile again the model because the we load the weights...\n",
        "model_2.compile(loss='categorical_crossentropy',\n",
        "                optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),\n",
        "                metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "moFdCZFzA9nC"
      },
      "execution_count": 115,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# let's fit the model on all of the data....\n",
        "history_fine_10_classes_full = model_2.fit(train_data_10_classes_full,\n",
        "                                           epochs=10,\n",
        "                                           initial_epoch = history_10_percent_data_aug.epoch[-1],\n",
        "                                           validation_data=test_data_10_classes_full,\n",
        "                                           validation_steps = int(0.25 * len(test_data)),\n",
        "                                           callbacks = [create_tensorboard_callback('transfer_learning','full_10_classes_data')])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YLFayEbjBhtP",
        "outputId": "ba0c2229-2591-4fe8-f670-b6d49d42e4d2"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving TensorBoard Files to : transfer_learning/full_10_classes_data/20220806-212527\n",
            "Epoch 5/10\n",
            "235/235 [==============================] - 52s 186ms/step - loss: 0.6851 - accuracy: 0.7787 - val_loss: 0.3992 - val_accuracy: 0.8785\n",
            "Epoch 6/10\n",
            "235/235 [==============================] - 43s 180ms/step - loss: 0.5731 - accuracy: 0.8133 - val_loss: 0.3969 - val_accuracy: 0.8785\n",
            "Epoch 7/10\n",
            "235/235 [==============================] - 41s 170ms/step - loss: 0.5127 - accuracy: 0.8337 - val_loss: 0.3379 - val_accuracy: 0.8958\n",
            "Epoch 8/10\n",
            "235/235 [==============================] - 36s 152ms/step - loss: 0.4607 - accuracy: 0.8484 - val_loss: 0.3344 - val_accuracy: 0.8958\n",
            "Epoch 9/10\n",
            "235/235 [==============================] - 33s 137ms/step - loss: 0.4340 - accuracy: 0.8603 - val_loss: 0.3606 - val_accuracy: 0.9062\n",
            "Epoch 10/10\n",
            "235/235 [==============================] - 35s 149ms/step - loss: 0.4094 - accuracy: 0.8695 - val_loss: 0.3232 - val_accuracy: 0.8889\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# let's evalute on full data....\n",
        "results_fine_full_data = model_2.evaluate(test_data_10_classes_full)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Jm9v1oPCHpu",
        "outputId": "fbfa8139-5d81-4394-a3bb-a65fa279d99a"
      },
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "79/79 [==============================] - 7s 82ms/step - loss: 0.3026 - accuracy: 0.9004\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# let's plot the results....\n",
        "compare_history(history_10_percent_data_aug,history_fine_10_classes_full)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "cN6R9ej-DmWy",
        "outputId": "f3c24d03-638f-4495-b35a-911948ef5dce"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x576 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Looks like that extra data helped! if we trained the model on more epochs it might improve more."
      ],
      "metadata": {
        "id": "pahVtSZxES2j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "UJj2ooh5EPBH"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "collapsed_sections": [],
      "name": "Transfer Learning with TensorFlow.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyO8zjW/HhymqwE1mMIVm3Dj",
      "include_colab_link": true
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}